//-----------------------------------------------------------------------------
// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//-----------------------------------------------------------------------------
#ifndef SRC_BACKENDS_POLICY_ENGINE_SOUFFLE_SQL_POLICY_DL_
#define SRC_BACKENDS_POLICY_ENGINE_SOUFFLE_SQL_POLICY_DL_

#include "src/analysis/souffle/taint.dl"

// OK: SELECT 42, 'foobar', null, true
// OK: SELECT gender FROM people
// FAIL: SELECT SSN FROM people
//

// Default owner associated with all tags related to SQL queries. 
#define SQL_OWNER "sql"

// A confidentiality tag used to capture that there restrictions.
#define RESTRICTED_TAG "restricted"

// Add restrictions on the access path.
.decl restricted(result: AccessPath, tag: IntegrityTag)

// Propagate restrictions to the engine.
hasTag(result, SQL_OWNER, RESTRICTED_TAG) :- restricted(result, _).
hasAppliedIntegrityTag(result, SQL_OWNER, tag) :- restricted(result, tag).

// Mark an access path as an output of a SQL query.
.decl isSqlOutput(path: AccessPath)

// True if there is a violation on this access path.
.decl violatesSqlPolicy(path: AccessPath)
.output violatesSqlPolicy

violatesSqlPolicy(path) :- 
  isSqlOutput(path), mayHaveTag(path, SQL_OWNER, RESTRICTED_TAG).

#endif  // SRC_BACKENDS_POLICY_ENGINE_SOUFFLE_SQL_POLICY_DL_
