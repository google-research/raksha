# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#-------------------------------------------------------------------------------

load(
    "//build_defs:raksha_policy_verifier.bzl",
    "raksha_policy_verifier_library",
)

licenses(["notice"])

# This is not yet available internally. So, we have generated the
# datalog file externally using this rule and simply import it
# explicitly below.
#
# raksha_policy_check(
#     name = "multimic",
#     src = "multimic.raksha",
# )
#
# The file that was generated by the `raksha_policy_check`. The rule
# name `multimic_datalog` is the same as the one that will be
# generated by the `raksha_policy_check` macro above.
#
filegroup(
    name = "multimic_datalog",
    srcs = ["multimic.dl"],
)

genrule(
    name = "multimic_disallowed_usage_dl",
    srcs = [
        ":multimic_datalog",
        "disallowed_usage.dl",
    ],
    outs = ["multimic_disallowed_usage.dl"],
    cmd = "cat $(location :multimic_datalog) $(location disallowed_usage.dl) > $@",
)

raksha_policy_verifier_library(
    name = "ambient_policy_checker",
    additional_dl_files = [
    ],
    policies = ["//src/backends/policy_engine/souffle/testdata:empty_policy.auth"],
    policy_verifier_interfaces = [":multimic_disallowed_usage_dl"],
)

cc_library(
    name = "policy_checker",
    srcs = ["policy_checker.cc"],
    hdrs = ["policy_checker.h"],
    copts = [
        "-fexceptions",
        "-Iexternal/souffle/src/include/souffle",
    ],
    # Turn off header modules, as Google precompiled headers use
    # -fno-exceptions, and combining a precompiled header with -fno-exceptions
    # with a binary that uses -fexceptions makes Clang upset.
    features = ["-use_header_modules"],
    linkopts = ["-pthread"],
    local_defines = ["RAM_DOMAIN_SIZE=64"],
    deps = [
        ":ambient_policy_checker",
        "//src/common/containers:hash_map",
        "//src/common/containers:hash_set",
        "//src/common/logging",
        "//src/common/utils:ranges",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/strings:str_format",
        "@souffle//:souffle_include_lib",
    ],
)

cc_test(
    name = "policy_checker_test",
    srcs = ["policy_checker_test.cc"],
    deps = [
        ":policy_checker",
        "//src/common/logging",
        "//src/common/testing:gtest",
    ],
)
