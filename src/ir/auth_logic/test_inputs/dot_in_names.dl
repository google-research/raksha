.type DummyType <: symbol
.type Number <: number
.type Principal <: symbol
.type Words <: symbol
.decl grounded_dummy(dummy_param : DummyType)
.decl says_are(speaker : Principal, words : Words, anotherWords : Words)
.decl says_areAlso(speaker : Principal, words : Words, anotherWords : Words)
.decl says_areConditionally(speaker : Principal, words : Words, anotherWords : Words)
.decl says_canActAs(speaker : Principal, p1 : Principal, p2 : Principal)
.decl says_evenIf(speaker : Principal, words : Words)
.decl says_isNumber(speaker : Principal, x : Number)
.decl says_isPrincipal(speaker : Principal, x : Principal)
.decl says_isWords(speaker : Principal, x : Words)
says_isWords("TheTest#Principal", "prefectly.cromulent").
says_isWords("TheTest#Principal", "names#with#hashes").
says_isWords("TheTest#Principal", "cromulent").
says_isPrincipal("TheTest#Principal", "TheTest#Principal").
says_isPrincipal("TheTest#Principal", "TheTestPrincipal").
says_isWords("TheTest#Principal", "perfectly#cromulent").
says_isWords("TheTest#Principal", "dots.are.on.the.rhs").
says_isWords("TheTest#Principal", "names.with.dots.in.them").
says_isWords("TheTestPrincipal", "prefectly.cromulent").
says_isWords("TheTestPrincipal", "names#with#hashes").
says_isWords("TheTestPrincipal", "cromulent").
says_isPrincipal("TheTestPrincipal", "TheTest#Principal").
says_isPrincipal("TheTestPrincipal", "TheTestPrincipal").
says_isWords("TheTestPrincipal", "perfectly#cromulent").
says_isWords("TheTestPrincipal", "dots.are.on.the.rhs").
says_isWords("TheTestPrincipal", "names.with.dots.in.them").
says_are("TheTestPrincipal", "names.with.dots.in.them", "prefectly.cromulent").
says_areConditionally("TheTestPrincipal", "names.with.dots.in.them", "cromulent") :- says_evenIf("TheTestPrincipal", "dots.are.on.the.rhs").
says_areAlso("TheTest#Principal", "names#with#hashes", "perfectly#cromulent").
grounded_dummy("dummy_var").
