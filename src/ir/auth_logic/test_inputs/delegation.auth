.decl unconditionallyDelegatedFact(x : Symbol)
.decl conditionallyDelegated(x : Symbol)
.decl someCondition(x : Symbol)
.decl anotherCondition(x : Symbol)
.decl undelegatedFact(x : Symbol)
.decl grounded(x : Symbol)

// prin1 delegates to prin2 about uDF for any variable
"prin1" says "prin2" canSay unconditionallyDelegatedFact(x) :-
    grounded(x).
// prin1 delegates to prin2 about cD only if prin1 believes sC
"prin1" says "prin2" canSay conditionallyDelegated(x) :-
    grounded(x), someCondition(x).
// prin1 believes uF if aC, but does not delegate uF
"prin1" says undelegatedFact(x) :- anotherCondition(x).
"prin1" says grounded("someX1").
"prin1" says grounded("someX2").

"prin2" says unconditionallyDelegatedFact("someX1").
q_uncond1_t = query "prin1" says unconditionallyDelegatedFact("someX1")?
q_uncond2_f = query "prin1" says unconditionallyDelegatedFact("someX2")?

"prin2" says someCondition("someX1").
"prin1" says someCondition("someX2").
"prin2" says conditionallyDelegated("someX1").
"prin2" says conditionallyDelegated("someX2").
q_cond1_f = query "prin1" says conditionallyDelegated("someX1")?
q_cond2_t = query "prin1" says conditionallyDelegated("someX2")?

"prin1" says anotherCondition("someX1").
"prin2" says anotherCondition("someX2").
q_undel1_t = query "prin1" says undelegatedFact("someX1")?
q_undel2_f = query "prin1" says undelegatedFact("someX2")?
