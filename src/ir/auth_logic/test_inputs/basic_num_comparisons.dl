.type DummyType <: symbol
.type Number <: number
.type Principal <: symbol
.decl grounded_dummy(dummy_param : DummyType)
.decl q1(dummy_param : DummyType)
.decl q10(dummy_param : DummyType)
.decl q11(dummy_param : DummyType)
.decl q12(dummy_param : DummyType)
.decl q13(dummy_param : DummyType)
.decl q14(dummy_param : DummyType)
.decl q2(dummy_param : DummyType)
.decl q3(dummy_param : DummyType)
.decl q4(dummy_param : DummyType)
.decl q5(dummy_param : DummyType)
.decl q6(dummy_param : DummyType)
.decl q7(dummy_param : DummyType)
.decl q8(dummy_param : DummyType)
.decl q9(dummy_param : DummyType)
.decl says_canActAs(speaker : Principal, p1 : Principal, p2 : Principal)
.decl says_isNumber(speaker : Principal, x : Number)
.decl says_isPrincipal(speaker : Principal, x : Principal)
.decl says_someFact(speaker : Principal, n : Number)
says_isNumber("test_principal", 7).
says_isNumber("test_principal", 9).
says_isNumber("test_principal", 6).
says_isNumber("test_principal", 13).
says_isNumber("test_principal", 4).
says_isNumber("test_principal", 12).
says_isNumber("test_principal", 2).
says_isNumber("test_principal", 999).
says_isNumber("test_principal", 8).
says_isNumber("test_principal", 10).
says_isNumber("test_principal", 0).
says_isNumber("test_principal", 5).
says_isNumber("test_principal", 1).
says_isNumber("test_principal", 3).
says_isNumber("test_principal", 47).
says_isNumber("test_principal", 42).
says_isNumber("test_principal", 14).
says_isPrincipal("test_principal", "test_principal").
says_isNumber("test_principal", 11).
says_someFact("test_principal", 1) :- 3<5.
says_someFact("test_principal", 2) :- 3<0.
says_someFact("test_principal", 3) :- 5>0.
says_someFact("test_principal", 4) :- 3>999.
says_someFact("test_principal", 5) :- 4=4.
says_someFact("test_principal", 6) :- 47=42.
says_someFact("test_principal", 7) :- 47!=42.
says_someFact("test_principal", 8) :- 0!=0.
says_someFact("test_principal", 9) :- 3<=5.
says_someFact("test_principal", 10) :- 3<=3.
says_someFact("test_principal", 11) :- 3<=0.
says_someFact("test_principal", 12) :- 3>=2.
says_someFact("test_principal", 13) :- 3>=3.
says_someFact("test_principal", 14) :- 3>=5.
q1("dummy_var") :- says_someFact("test_principal", 1), grounded_dummy("dummy_var").
q2("dummy_var") :- says_someFact("test_principal", 2), grounded_dummy("dummy_var").
q3("dummy_var") :- says_someFact("test_principal", 3), grounded_dummy("dummy_var").
q4("dummy_var") :- says_someFact("test_principal", 4), grounded_dummy("dummy_var").
q5("dummy_var") :- says_someFact("test_principal", 5), grounded_dummy("dummy_var").
q6("dummy_var") :- says_someFact("test_principal", 6), grounded_dummy("dummy_var").
q7("dummy_var") :- says_someFact("test_principal", 7), grounded_dummy("dummy_var").
q8("dummy_var") :- says_someFact("test_principal", 8), grounded_dummy("dummy_var").
q9("dummy_var") :- says_someFact("test_principal", 9), grounded_dummy("dummy_var").
q10("dummy_var") :- says_someFact("test_principal", 10), grounded_dummy("dummy_var").
q11("dummy_var") :- says_someFact("test_principal", 11), grounded_dummy("dummy_var").
q12("dummy_var") :- says_someFact("test_principal", 12), grounded_dummy("dummy_var").
q13("dummy_var") :- says_someFact("test_principal", 13), grounded_dummy("dummy_var").
q14("dummy_var") :- says_someFact("test_principal", 14), grounded_dummy("dummy_var").
grounded_dummy("dummy_var").
.output q1
.output q2
.output q3
.output q4
.output q5
.output q6
.output q7
.output q8
.output q9
.output q10
.output q11
.output q12
.output q13
.output q14
