//-----------------------------------------------------------------------------
// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//-----------------------------------------------------------------------------
#ifndef SRC_ANALYSIS_SOUFFLE_SENSITIVITY_ANALYSIS_DL_
#define SRC_ANALYSIS_SOUFFLE_SENSITIVITY_ANALYSIS_DL_

// This file defines the calculations for sensitivity analysis
// to be used in differntial privacy calculations.
#include "src/analysis/souffle/taint.dl"
#include "src/analysis/souffle/sql_output.dl"

#define CORE_INPUT_OPERATOR as("core.input", Operator)
#define SQL_INPUT_TABLE_COLUMN_OPERATOR as ("sql.input_table_column", Operator)
#define SQL_FUNCTION_CALL_OPERATOR as("sql.function_call", Operator)
#define SQL_WHERE_OPERATOR as("sql.where", Operator)
#define SQL_GROUP_BY_COLUMNS_OPERATOR as ("sql.group_by_columns", Operator)
#define SQL_GROUP_BY_OPERATOR as("sql.group_by", Operator)
#define SQL_ORDER_BY_OPERATOR as("sql.order_by", Operator)
#define SQL_SELECT_OPERATOR as("sql.select", Operator)
#define SQL_SELECT_DISTINCT_OPERATOR as("sql.select_distinct", Operator)
#define SQL_FILTER_OPERATOR as("sql.filter", Operator)
#define SQL_JOIN_OPERATOR as("sql.join", Operator)
#define SQL_COLUMN_ACCESS_OPERATOR as("sql.column_access", Operator)
#define SQL_OUTPUT_OPERATOR as("sql.output", Operator)
#define SQL_SUM_OPERATOR as("sql.sum", Operator)
#define SQL_COUNT_OPERATOR as("sql.count", Operator)
#define SQL_MAX_OPERATOR as("sql.max", Operator)
#define SQL_MIN_OPERATOR as("sql.min", Operator)
#define SQL_AVERAGE_OPERATOR as("sql.average", Operator)
#define SQL_MEDIAN_OPERATOR as("sql.median", Operator)
#define SQL_STDDEV_OPERATOR as("sql.stddev", Operator)
#define SQL_PERCENTILE_CONT_OPERATOR as("sql.percentile_cont", Operator)
#define SQL_VARIANCE_OPERATOR as("sql.variance", Operator)
#define CORE_EQUALS_OPERATOR as("core.equals", Operator)
#define CORE_LOGICAL_AND_OPERATOR as("core.and", Operator)

#define PRIVACY_MECHANISM_OPERATOR as("privacy_mechanism", Operator)

#define ANY as("<<ANY>>", symbol)

.type SensitivityScore <: number

.decl isSqlOperationPrefix(prefix: symbol)
isSqlOperationPrefix("sql.").
isSqlOperationPrefix("googlesql.").
// One isSqlOperation fact per each sql operator,
// currently supporting one output.
// We refer to results as 'value' (sqlValue declared below)
.decl isSqlOperation(sqlOperation: Operation)
isSqlOperation(operation) :- isOperation(operation),
      operationHasOperator(operation, operator),
      isSqlOperationPrefix(prefix),
      substr(operator, 0, strlen(prefix))= prefix.

.decl isTransformationOperator(op: Operator)
isTransformationOperator(SQL_WHERE_OPERATOR).
isTransformationOperator(SQL_GROUP_BY_OPERATOR).
isTransformationOperator(SQL_FILTER_OPERATOR).
isTransformationOperator(SQL_SELECT_OPERATOR).
isTransformationOperator(SQL_SELECT_DISTINCT_OPERATOR).
isTransformationOperator(SQL_GROUP_BY_OPERATOR).
isTransformationOperator(SQL_ORDER_BY_OPERATOR).

// Transformation operations may come before aggregation operations.
// Their sensitivity score varies based on their output.
.decl isTransformationOperation(sql_operation: Operation)
isTransformationOperation(operation) :- isSqlOperation(operation),
      operationHasOperator(operation, operator),
      isTransformationOperator(operator).

.decl isAggregationOperator(op: Operator)
isAggregationOperator(SQL_SUM_OPERATOR).
isAggregationOperator(SQL_COUNT_OPERATOR).
isAggregationOperator(SQL_MAX_OPERATOR).
isAggregationOperator(SQL_MIN_OPERATOR).
isAggregationOperator(SQL_AVERAGE_OPERATOR).
isAggregationOperator(SQL_MEDIAN_OPERATOR).
isAggregationOperator(SQL_STDDEV_OPERATOR).
isAggregationOperator(SQL_PERCENTILE_CONT_OPERATOR).
isAggregationOperator(SQL_VARIANCE_OPERATOR).

// Aggregation operations point to where noise needs to be added.
.decl isAggregationOperation(sql_operation: Operation)
isAggregationOperation(operation) :- isSqlOperation(operation),
      operationHasOperator(operation, operator),
      isAggregationOperator(operator).

isAggregationOperation(operation) :- isSqlOperation(operation),
      operationHasOperator(operation, SQL_FUNCTION_CALL_OPERATOR),
      operationHasAttribute(operation,
        ["function_kind", $StringAttributePayload("aggregate")]).

.decl isSqlValue(value: AccessPath)
isSqlValue(value) :- isSqlOperation(operation),
      operationHasResult(operation, value).

.decl isInputOperator(op: Operator)
isInputOperator(CORE_INPUT_OPERATOR).
isInputOperator(SQL_INPUT_TABLE_COLUMN_OPERATOR).

// Keeping track of all initial inputs.
.decl isInitialInput (ingress_point: AccessPath)
isInitialInput(as(ingress_point, AccessPath)) :- isOperation(operation),
      operationHasOperator(operation, operator),
      isInputOperator(operator),
      operationHasResult(operation, ingress_point).

// Helper functions to flatten input/operand lists.
.decl intermediateFlatten(list:OperandList, sublist:OperandList,
      contains_element:AccessPath)

intermediateFlatten(list, sublist, contains_element) :-
      operationHasOperandList(operation, list),
      operandListHasOperandListSuffix(list, [contains_element, sublist]).

.decl flatten(list:OperandList, contains_element:AccessPath)
flatten(list, contains_element) :-
       intermediateFlatten(list, _, contains_element).

// Flattening each individual input per value.
.decl isSqlInput(operation: Operation, sql_input: AccessPath)

isSqlInput(operation, sql_input) :- isSqlOperation(operation),
      operationHasOperandList(operation, input_list),
      flatten(input_list, sql_input).

// The final value sensitivity, equal to the max of input times function
// sensitivity.
.decl sqlValueSensitivity(value: AccessPath,
      sensitivity_score: SensitivityScore)
sqlValueSensitivity(value, sensitivity_score) :-
      isOperation(operation),
      operationHasResult(operation, value),
      operationOperandListLength(operation, input_list_length),
      sqlOperationHasSensitivityScoreAtIndex(operation,
                                             input_sensitivity,
                                             input_list_length-1),
                                              operationHasOperator(operation, operator),
      (
            (sqlFunctionJoinSensivity(operation, function_sensitivity);
            sqlFunctionSensitivity(operator, function_sensitivity)),
            sensitivity_score = input_sensitivity * function_sensitivity;
            !sqlFunctionSensitivity(operator, _),
            !sqlFunctionJoinSensivity(operation, _),
            sensitivity_score = input_sensitivity
      ).

.decl usesGroupByColumns(ap: AccessPath, column_access_paths: OperandList)
usesGroupByColumns(result, column_access_paths) :-
      isOperation(op),
      operationHasResult(op, result),
      operationHasOperator(op, SQL_GROUP_BY_COLUMNS_OPERATOR),
      operationHasOperandList(op, column_access_paths).

// Assign an arbitrary number to each list of group-by columns. This will be
// used to impose an order for normalization later.
.decl enumeratedGroupByColumns(group_by_columns: OperandList, num: number)
enumeratedGroupByColumns(group_by_columns, autoinc()) :-
      isOperation(op), operationHasOperator(op, SQL_GROUP_BY_COLUMNS_OPERATOR),
      operationHasOperandList(op, group_by_columns).

#define GROUP_BY_GROUPED_COLUMN_OPERAND_INDEX 0
#define GROUP_BY_COLUMNS_OPERAND_INDEX 1

.type GroupByKeyColumn = [column_access_paths: OperandList, index: number]
.decl hasGroupByKeyColumn(ap: AccessPath, groupByKeyColumn: GroupByKeyColumn)

hasGroupByKeyColumn(ap, [group_by_columns, index]) :-
      isOperation(op),
      operationHasResult(op, ap),
      operationHasOperator(op, SQL_GROUP_BY_OPERATOR),
      operationHasOperandAtIndex(op, grouped_column_input, GROUP_BY_GROUPED_COLUMN_OPERAND_INDEX),
      operationHasOperandAtIndex(op, group_by_columns_input, GROUP_BY_COLUMNS_OPERAND_INDEX),
      usesGroupByColumns(group_by_columns_input, group_by_columns),
      operandListHasOperandAtIndex(group_by_columns, grouped_column_input, index).

.type GroupByKeyColumnPair = [left: GroupByKeyColumn, right: GroupByKeyColumn]

#define BINARY_OPERATION_LHS_OPERAND_INDEX 0
#define BINARY_OPERATION_RHS_OPERAND_INDEX 1

// A pair of group by key columns coming right out of an equals. This is not yet
// normalized to have the "lesser" column list on the left hand side.
.decl hasEqualsGroupByPair(ap: AccessPath, key: GroupByKeyColumnPair)
hasEqualsGroupByPair(ap, [lhs_group_by_key, rhs_group_by_key]) :-
      isOperation(op), operationHasOperator(op, CORE_EQUALS_OPERATOR),
      operationHasOperandAtIndex(op, lhs, BINARY_OPERATION_LHS_OPERAND_INDEX),
      hasGroupByKeyColumn(lhs, lhs_group_by_key),
      operationHasOperandAtIndex(op, rhs, BINARY_OPERATION_RHS_OPERAND_INDEX),
      hasGroupByKeyColumn(rhs, rhs_group_by_key), operationHasResult(op, ap).

.decl accessPathHasCandidateJoinKeyPair(ap: AccessPath, pair: GroupByKeyColumnPair)

// Equals is symmetric, so we can swap the order of the operands as we please.
// For later checks, it will be useful to have one group by key list on the RHS
// and the other on the LHS. Normalize before making a candidate join key.
accessPathHasCandidateJoinKeyPair(ap, [[col_list1, idx1], [col_list2, idx2]]) :-
      hasEqualsGroupByPair(ap, [[col_list1, idx1], [col_list2, idx2]]),
      enumeratedGroupByColumns(col_list1, ord1), enumeratedGroupByColumns(col_list2, ord2),
      ord1 <= ord2.

accessPathHasCandidateJoinKeyPair(ap, [[col_list2, idx2], [col_list1, idx1]]) :-
      hasEqualsGroupByPair(ap, [[col_list1, idx1], [col_list2, idx2]]),
      enumeratedGroupByColumns(col_list1, ord1), enumeratedGroupByColumns(col_list2, ord2),
      ord1 > ord2.

.decl isAndOperation(op: Operation)
isAndOperation(op) :- isOperation(op), operationHasOperator(op, CORE_LOGICAL_AND_OPERATOR).

// We want to ensure that any `JOIN` we describe as a grouping `JOIN` joins on
// exactly the key used by its input tables to `GROUP BY`. Part of this is
// ensuring that no terms going into an `AND` producing a `JOIN` key come from
// non-`GROUP BY` sources, such as `col1 = "SECRET"`. This relation checks that
// by ensuring that all inputs have join key pairs.
.decl allAndOperationInputsHaveJoinKeyPairs(op: Operation)
.decl andOperationInputsUpToIndexHaveJoinKeyPairs(op: Operation, idx: number)

andOperationInputsUpToIndexHaveJoinKeyPairs(op, 0) :-
      isAndOperation(op), operationHasOperandAtIndex(op, operand, 0),
      accessPathHasCandidateJoinKeyPair(operand, _).

andOperationInputsUpToIndexHaveJoinKeyPairs(op, idx + 1) :-
      isAndOperation(op), operationHasOperandAtIndex(op, operand, idx + 1),
      accessPathHasCandidateJoinKeyPair(operand, _),
      andOperationInputsUpToIndexHaveJoinKeyPairs(op, idx).

allAndOperationInputsHaveJoinKeyPairs(op) :-
      isAndOperation(op), operationHasOperandList(op, operand_list),
      operandListLength(operand_list, operand_list_length), operand_list_length > 0,
      andOperationInputsUpToIndexHaveJoinKeyPairs(op, operand_list_length - 1).

accessPathHasCandidateJoinKeyPair(ap, pair) :-
      isAndOperation(op), allAndOperationInputsHaveJoinKeyPairs(op), operationHasResult(op, ap),
      operationHasOperand(op, operand), accessPathHasCandidateJoinKeyPair(operand, pair).

.decl isInnerJoin(op: Operation)
isInnerJoin(op) :-
      isOperation(op), operationHasOperator(op, SQL_JOIN_OPERATOR), 
      operationHasAttribute(op, ["join_type", $StringAttributePayload("INNER")]).

// There's no guarantee that the candidate join keys we produce will actually
// reach a join. If they do, however, we want to validate them to see whether
// they cause a join to be a grouping join. This is the collection of access
// paths that eligible joins take their join keys on.
.decl joinHasCandidateJoinKeyAccessPath(op: Operation, join_key_ap: AccessPath)
#define JOIN_EXPR_INDEX 1
joinHasCandidateJoinKeyAccessPath(op, join_key_ap) :-
      isInnerJoin(op), operationHasOperandAtIndex(op, join_key_ap, JOIN_EXPR_INDEX).

.decl isCandidateJoinKeyAccessPath(join_key_ap: AccessPath)
isCandidateJoinKeyAccessPath(ap) :- joinHasCandidateJoinKeyAccessPath(_, ap).

.decl candidateGroupingJoinKeyAccessPathLhsMapsToMultipleRhs(join_key_ap: AccessPath)
candidateGroupingJoinKeyAccessPathLhsMapsToMultipleRhs(ap) :-
      isCandidateJoinKeyAccessPath(ap),
      accessPathHasCandidateJoinKeyPair(ap, [lhs, rhs1]),
      accessPathHasCandidateJoinKeyPair(ap, [lhs, rhs2]),
      rhs1 != rhs2.

.decl candidateGroupingJoinKeyAccessPathRhsMapsToMultipleLhs(join_key_ap: AccessPath)
candidateGroupingJoinKeyAccessPathRhsMapsToMultipleLhs(ap) :-
      accessPathHasCandidateJoinKeyPair(ap, [lhs1, rhs]),
      accessPathHasCandidateJoinKeyPair(ap, [lhs2, rhs]),
      lhs1 != lhs2.

.decl candidateGroupingJoinKeyAccessPathHasMismatchedOperandLists(ap: AccessPath)
candidateGroupingJoinKeyAccessPathHasMismatchedOperandLists(ap) :-
      accessPathHasCandidateJoinKeyPair(ap, [[operand_list1, _], _]),
      accessPathHasCandidateJoinKeyPair(ap, [[operand_list2, _], _]),
      operand_list1 != operand_list2.

candidateGroupingJoinKeyAccessPathHasMismatchedOperandLists(ap) :-
      accessPathHasCandidateJoinKeyPair(ap, [_, [operand_list1, _]]),
      accessPathHasCandidateJoinKeyPair(ap, [_, [operand_list2, _]]),
      operand_list1 != operand_list2.

.decl numPairsAtCandidateGroupingJoinKeyAccessPath(ap: AccessPath, num_pairs: number)
numPairsAtCandidateGroupingJoinKeyAccessPath(ap, num_pairs) :-
      isCandidateJoinKeyAccessPath(ap),
      count : {accessPathHasCandidateJoinKeyPair(ap, _)} = num_pairs.

.decl joinKeyAtAccessPathHasDifferentSizeFromSourceGroups(ap: AccessPath)
joinKeyAtAccessPathHasDifferentSizeFromSourceGroups(ap) :-
      isCandidateJoinKeyAccessPath(ap),
      accessPathHasCandidateJoinKeyPair(ap, [[operand_list, _], _]),
      operandListLength(operand_list, operand_list_length),
      numPairsAtCandidateGroupingJoinKeyAccessPath(ap, num_pairs),
      operand_list_length != num_pairs.

 joinKeyAtAccessPathHasDifferentSizeFromSourceGroups(ap) :-
      isCandidateJoinKeyAccessPath(ap),
      accessPathHasCandidateJoinKeyPair(ap, [_, [operand_list, _]]),
      operandListLength(operand_list, operand_list_length),
      numPairsAtCandidateGroupingJoinKeyAccessPath(ap, num_pairs),
      operand_list_length != num_pairs.

.decl isValidGroupingJoinKeyAtAccessPath(ap: AccessPath)
isValidGroupingJoinKeyAtAccessPath(ap) :-
      isCandidateJoinKeyAccessPath(ap),
      !joinKeyAtAccessPathHasDifferentSizeFromSourceGroups(ap),
      !candidateGroupingJoinKeyAccessPathHasMismatchedOperandLists(ap),
      !candidateGroupingJoinKeyAccessPathLhsMapsToMultipleRhs(ap),
      !candidateGroupingJoinKeyAccessPathRhsMapsToMultipleLhs(ap).

.decl isGroupingJoin(op: Operation)
isGroupingJoin(op) :-
      joinHasCandidateJoinKeyAccessPath(op, join_expr_ap),
      accessPathHasCandidateJoinKeyPair(join_expr_ap, _), // Need at least one pair to count.
      isValidGroupingJoinKeyAtAccessPath(join_expr_ap).

// Keeping track of sensitivity score per each input at index, where index is
// the depth from initial inputs. This relation is used to calculate the maximum
// input sensitivity. It's decomposed into base and inductive cases because
// recursive aggregates are not supported yet for the compiler case in souffle.
// The operation is used as a proxy for its result (AccessPath).
.decl sqlOperationHasSensitivityScoreAtIndex(operation: Operation,
      sensitivity_score: SensitivityScore,
      index: number)

// Base cases (index 0).
// Sensitivity score for initial inputs is 1.
sqlOperationHasSensitivityScoreAtIndex(operation, 1, 0) :-
      isOperation(operation),
      operationHasOperandAtIndex(operation, sql_input, 0),
      (isInitialInput(sql_input);
      sql_input = ANY).

// For all other inputs, we get the final sensitivity score.
sqlOperationHasSensitivityScoreAtIndex(operation, sensitivity_score, 0) :-
      isOperation(operation),
      operationHasOperandAtIndex(operation, sql_input, 0),
      sqlValueSensitivity(sql_input, sensitivity_score).

// Inductive cases.
// We keep track at the score at each index, and ensure that the sensitivity
// score at index is only updated if the input at index has sensitivity score
// greater than the previous sensitivity score.
// Otherwise, the prev_index sensitivity score is copied at index.
sqlOperationHasSensitivityScoreAtIndex(
      operation,
      max(prev_sensitivity_score, input_sensitivity_score),
      prev_index + 1) :-
            isOperation(operation),
            operationHasOperandAtIndex(operation, sql_input, prev_index + 1),
            isSqlInput(operation, sql_input),
            sqlOperationHasSensitivityScoreAtIndex(
            operation, prev_sensitivity_score, prev_index),
            ( sqlValueSensitivity(sql_input, input_sensitivity_score);
              (sql_input = ANY;
              isInitialInput(sql_input)),
              input_sensitivity_score = 1
            ).


// Function sensitivity scores per each sql operator as defined in PINQ
.decl sqlFunctionSensitivity(
      operator: Operator, sensitivity_score: SensitivityScore)

sqlFunctionSensitivity(operator, 1) :-
      isAggregationOperation(operation),
      operationHasOperator(operation, operator).
sqlFunctionSensitivity(SQL_FILTER_OPERATOR, 1).
sqlFunctionSensitivity(SQL_WHERE_OPERATOR, 1).
sqlFunctionSensitivity(SQL_SELECT_OPERATOR, 1).
sqlFunctionSensitivity(SQL_COLUMN_ACCESS_OPERATOR, 1).
sqlFunctionSensitivity(SQL_OUTPUT_OPERATOR, 1).
sqlFunctionSensitivity(SQL_ORDER_BY_OPERATOR, 1).
sqlFunctionSensitivity(SQL_SELECT_DISTINCT_OPERATOR, 2).
sqlFunctionSensitivity(SQL_GROUP_BY_OPERATOR, 2).
sqlFunctionSensitivity(SQL_FUNCTION_CALL_OPERATOR, 1).

// We track every mechanism that adds noise.
// Right now, we are not tracking the type of noise (e.g. via Laplace or
// Gaussian mechanisms).
.decl isDiffPrivacyMechanism(operation: Operation)
isDiffPrivacyMechanism(operation) :- isOperation(operation),
    operationHasOperator(operation, PRIVACY_MECHANISM_OPERATOR).

// We propagate privacy mechanisms backwards to inputs as per the PINQ paper.
// This relation tracks every input to its (direct and indirect) outputs.
.decl sqlPath(sql_input: AccessPath, sql_output: AccessPath)

sqlPath(sql_input, sql_input):- isSqlInput(operation, sql_input).

sqlPath(dp_input, dp_input) :- isDiffPrivacyMechanism(operation),
    operationHasOperandList(operation, input_list),
    flatten(input_list, dp_input).

sqlPath(path_start, path_end) :- sqlPath(path_start, intermediate),
    operationHasOperandList(operation, input_list),
    flatten(input_list, intermediate),
    operationHasResult(operation, path_end).

// Helper relation used to get the sensntivity of JOIN operations.
.decl joinOperationHasKappa(operation: Operation, kappa: number)
joinOperationHasKappa(operation, kappa) :- isSqlOperation(operation),
      operationHasOperator(operation, SQL_JOIN_OPERATOR),
      operationHasResult(operation, result),
      isDiffPrivacyMechanism(diff_privacy_mechanism),
      operationHasResult(diff_privacy_mechanism, diff_privacy_mechanism_result),
      operationHasAttribute(
            diff_privacy_mechanism, ["kappa", $NumberAttributePayload(kappa)]),
      sqlPath(result, diff_privacy_mechanism_result).

.decl sqlFunctionJoinSensivity(operation: Operation,
      sensitivity_score: SensitivityScore)
// Join operators are special in that they need to somehow limit the
// contribution of users in them. One way to do this is to specify the of keys
// on which the join will be performed, group input data based on those keys,
// and then join the group keys
// (PINQ https://www.microsoft.com/en-us/research/wp-content/uploads/2009/06/sigmod115-mcsherry.pdf),
// where the sensitivity score becomes
// equal to that of GROUP BY. Since the input of this type of JOIN would a
// GROUP BY anyway, we assign the function senstivity score of the JOIN to be 1.
// We assign the sensitivity score here, and check whether the grouping is being
// done when checking for policy violations.
// The other way is to limit the number (kappa) of grouped partitions a user can
// contribute to (Google https://arxiv.org/abs/1909.01917), where the
// sensitivity score becomes equal to kappa. We check if either of these bounds
// are present in the JOIN operations. This relation can be further extended if
// new ways of bounding JOIN are found.
sqlFunctionJoinSensivity(operation, as(sensitivity_score, SensitivityScore)) :-
      isSqlOperation(operation),
      operationHasOperator(operation, SQL_JOIN_OPERATOR),
      ( joinOperationHasKappa(operation, sensitivity_score);
        !joinOperationHasKappa(operation, _),
        sensitivity_score = 1).

#endif // SRC_SOUFFLE_ANALYSIS_SENSITIVITY_ANALYSIS_DL_
