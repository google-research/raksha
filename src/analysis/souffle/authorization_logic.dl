//-----------------------------------------------------------------------------
// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//-----------------------------------------------------------------------------

// This file defines the interface between authorization logic and taint
// tracking / information flow control.

#ifndef SRC_ANALYSIS_SOUFFLE_AUTHORIZATION_LOGIC_DL_
#define SRC_ANALYSIS_SOUFFLE_AUTHORIZATION_LOGIC_DL_

#include "access_path.dl"
#include "tags.dl"

// A Principal that makes assertions in authorization logic
.type Principal <: symbol

// Some party asserts the claim that the label of an access path should be
// downgraded by removing the referenced tag from the set.
.decl saysDowngrades(speaker: Principal, p: AccessPath, t: Tag)

.decl isPrincipal(p: Principal)

// This party is the owner of a taint Tag (they have the privilege to downgrade
// it).
.decl ownsTag(owner: Principal, tag: Tag)

.decl saysOwnsTag(speaker: Principal, owner: Principal, tag: Tag)

.decl saysHasTag(speaker: Principal, path: AccessPath, t: Tag)

// Some accessPath is actually downgraded (by taking into consideration the
// privileges of a party trying to downgrade it, and as a result of that party
// deciding to downgrade it). Because here IFC labels are sets of tags (ordered
// by the subset or equals relation), the downgrade works by removing a tag
// from the set (making it "lower" in the order).
.decl downgrades(path: AccessPath, tag: Tag)

//-----------------------------------------------------------------------------
// Rules
//-----------------------------------------------------------------------------
downgrades(path, tag) :- ownsTag(owner, tag), saysDowngrades(owner, path, tag).

// This rule conservatively says that if _any_ principal claims that a path has
// a tag, then it has the tag according to the taint analysis. This rule is
// likely to be adjusted later. For confidentiality tags this should be OK to
// start with.
claimHasTag(principal, path, tag) :- saysHasTag(principal, path, tag).

// This rule says that any principal can say that another principal owns a tag.
// This rule is just a starting point to allow all aspects of the policy to
// come from authorization logic -- it is just a simple way to generate
// ownsTag from something with a speaker. This rule is likely to change. It
// does not rule out the case that two different principals claim ownership of
// a tag.
ownsTag(owner, tag) :- saysOwnsTag(_, owner, tag).

// This rule says that any principal that creates a tag owns it. This rule is 
// just a starting point to allow all aspects of the policy to come from 
// authorization logic -- it is just a simple way to generate ownsTag from 
// something with a speaker. This rule is likely to change. It does not rule
// out the case that two different principals both create the same tag.
ownsTag(speaker, tag) :- saysCreateTag(speaker, tag).

//-----------------------------------------------------------------------------
// Universe Populating Rules
//-----------------------------------------------------------------------------

// TODO(#126): Fix the universe populating rules, potentially by deleting
//  them entirely.
// For now, we need to not populate isTag to handle cases where the tests
// cause all principals to be associated with all tags.
// isTag(tag) :- ownsTag(_, tag).

isPrincipal(owner) :- ownsTag(owner, _).

#endif // SRC_ANALYSIS_SOUFFLE_AUTHORIZATION_LOGIC_DL_
