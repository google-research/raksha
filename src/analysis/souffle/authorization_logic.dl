//-----------------------------------------------------------------------------
// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//-----------------------------------------------------------------------------

// This file defines the interface between authorization logic and taint
// tracking / information flow control.

#ifndef SRC_ANALYSIS_SOUFFLE_AUTHORIZATION_LOGIC_DL_
#define SRC_ANALYSIS_SOUFFLE_AUTHORIZATION_LOGIC_DL_

#include "dataflow_graph.dl"
#include "tags.dl"

// A Principal that makes assertions in authorization logic
.type Principal <: symbol

// Some party asserts the claim that the label of an access path should
// remove the referenced tag from the set.
.decl says_removeTag(speaker: Principal, path: AccessPath, owner: Principal, tag: Tag)

// The `speaker` says that `delegatee` is allowed to indicate that a `path` does
// not have a `tag`.
.decl says_canSay_removeTag(
  speaker: Principal, delegatee: Principal, path: AccessPath, owner: Principal, tag: Tag)

.decl isPrincipal(principal: Principal)

// This party is the owner of an access path.
.decl ownsAccessPath(owner: Principal, path: AccessPath)

// The `speaker` says this party is the owner of an access path.
.decl says_ownsAccessPath(speaker: Principal, owner: Principal, path: AccessPath)

// The `speaker` says this party is the owner of an access path.
.decl says_canSay_ownsAccessPath(speaker: Principal, delegatee: Principal,
                                 owner: Principal, path: AccessPath)

// This party is the owner of a taint Tag (they have the privilege to remove
// it).
.decl ownsTag(owner: Principal, tag: Tag)

.decl says_ownsTag(speaker: Principal, owner: Principal, tag: Tag)

// The `speaker` says that `path` definitely has `tag` taint.
.decl says_hasTag(speaker: Principal, path: AccessPath, owner: Principal, tag: Tag)

// The `speaker` says that the `delegatee` can say that `path` has `tag`.
.decl says_canSay_hasTag(
  speaker: Principal, delegatee: Principal, path: AccessPath, owner: Principal, tag: Tag)

//-----------------------------------------------------------------------------
// Rules
//-----------------------------------------------------------------------------

// This rule says that any principal can say that another principal owns a tag.
// This rule is just a starting point to allow all aspects of the policy to
// come from authorization logic -- it is just a simple way to generate
// ownsTag from something with a speaker. This rule is likely to change. It
// does not rule out the case that two different principals claim ownership of
// a tag.
ownsTag(owner, tag) :- says_ownsTag(_, owner, tag).

//-----------------------------------------------------------------------------
// Universe Populating Rules
//-----------------------------------------------------------------------------

// TODO(#126): Fix the universe populating rules, potentially by deleting
//  them entirely.
// For now, we need to not populate isTag to handle cases where the tests
// cause all principals to be associated with all tags.
// isTag(tag) :- ownsTag(_, tag).

isPrincipal(owner) :- ownsTag(owner, _).
isPrincipal(owner) :- ownsAccessPath(owner, _).

#endif // SRC_ANALYSIS_SOUFFLE_AUTHORIZATION_LOGIC_DL_
