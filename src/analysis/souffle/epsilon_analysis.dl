//-----------------------------------------------------------------------------
// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//-----------------------------------------------------------------------------

#ifndef SRC_ANALYSIS_SOUFFLE_EPSILON_ANALYSIS_DL_
#define SRC_ANALYSIS_SOUFFLE_EPSILON_ANALYSIS_DL_

// This file tracks the epsilon and delta parameters, global and local, and
// throws a violationPolicy when the global parameters are strictly smaller
// than the local ones

#include "src/analysis/souffle/sensitivity_analysis.dl"

.type GlobalDPParameter <: symbol

.type Epsilon <: number

.type Delta <: number

// Type representing different differential privacy parameters (such as epsilon
// and delta).
.type DPParameterValue = EpsilonValue { value: Epsilon }
    | DeltaValue { value: Delta }

.decl isDPParameter(rule: DPParameterValue)

// Need following relations to be declared while using policies based on
// authorization logic are used to set global values
.decl says_isGlobalEpsilon(speaker: Principal, global_epsilon: Epsilon)
.decl says_isGlobalDelta(speaker: Principal, global_delta: Delta)

// Global epsilon is a value determined by users of Raksha.
// We could eventually set one as the default.
.decl isGlobalEpsilon(epsilon: Epsilon)
isGlobalEpsilon(epsilon) :- isDPParameter($EpsilonValue(epsilon)).
isGlobalEpsilon(epsilon) :- says_isGlobalEpsilon(_, epsilon).

.decl isGlobalDelta(delta: Delta)
isGlobalDelta(delta) :- isDPParameter($DeltaValue(delta)).
isGlobalDelta(delta) :- says_isGlobalDelta(_, delta).

isSqlInput(operation, sql_input) :- isDiffPrivacyMechanism(operation),
      operationHasOperandList(operation, input_list),
      flatten(input_list, sql_input).
// The epsilon of each privacy mechanism is tracked and later attached
// to values.
.decl diffPrivacyMechanismHasEpsilon(operation: Operation, epsilon: Epsilon)
diffPrivacyMechanismHasEpsilon(operation, as(epsilon, Epsilon)) :-
    isDiffPrivacyMechanism(operation),
    operationHasAttribute(
        operation,
        ["epsilon", $NumberAttributePayload(epsilon)]).

.decl diffPrivacyMechanismHasDelta(operation: Operation, delta: Delta)
diffPrivacyMechanismHasDelta(operation, as(delta, Delta)) :-
    isDiffPrivacyMechanism(operation),
    operationHasAttribute(operation, ["delta", $NumberAttributePayload(delta)]).

// Sequential composition: the epsilons of differential privacy mechanisms on
// input value are added.
.decl epsilonDiffPrivacy(value: AccessPath, epsilon: Epsilon)
epsilonDiffPrivacy(value, epsilon) :- isInitialInput(value),
    epsilon = sum y: {
            isSqlOutput(operation),
            operationHasResult(operation, sql_output),
            sqlPath(intermediate_value, sql_output),
            epsilonDiffPrivacyIntermediate(value, intermediate_value, y)}.
// Intermediate relation used to grab all the privacy mechanisms that go back
// to any given sqlInput
.decl epsilonDiffPrivacyIntermediate(value: AccessPath,
    sql_output: AccessPath,
    epsilon: Epsilon)
epsilonDiffPrivacyIntermediate(value, sql_output, epsilon*sensitivity) :-
    sqlPath(value, sql_output),
    isDiffPrivacyMechanism(operation),
    operationHasResult(operation, sql_output),
    sqlValueSensitivity(sql_output, sensitivity),
    diffPrivacyMechanismHasEpsilon(operation, epsilon).

// The deltas of differential privacy are also added as per Dwork and Roth
// (https://www.cis.upenn.edu/~aaroth/Papers/privacybook.pdf). In addition,
// Abuah, Darais, and Near describe the role of delta in advanced composition
// (https://arxiv.org/pdf/2105.01632.pdf)
.decl deltaDiffPrivacy(value: AccessPath, delta: Delta)
deltaDiffPrivacy(value, delta) :- sqlPath(value, _),
    delta = sum y : {deltaDiffPrivacyIntermediate(value, _, y)}.

// Intermediate relation used to grab all the privacy mechanisms that go back
// to any given sqlInput
.decl deltaDiffPrivacyIntermediate(value: AccessPath,
    sql_output: AccessPath,
    delta: Delta)
deltaDiffPrivacyIntermediate(value, sql_output, delta) :-
    sqlPath(value, sql_output),
    isDiffPrivacyMechanism(operation),
    operationHasResult(operation, sql_output),
    diffPrivacyMechanismHasDelta(operation, delta).

// DP Policies are violated when:
// 1. There is a global epsilon but no local epsilon per an output path
// 2. The global epsilon is less than the local epsilon for a value used in an
//    aggregation operation as input (the value in isSqlPath)
//    times the sensitivity of said agregation operation.
// 3. The global epsilon is less than the local epsilon for an input to an
//    aggregation operation.
// 4. The global delta for an input to an aggregation operation is smaller than
//    the local delta.
// 5. There is an unrestricted join operation.
violatesPolicy(value) :- isInitialInput(value),
    isSqlOutput(sql_output_operation),
    operationHasResult(sql_output_operation, sql_output),
    sqlPath(value, sql_output),
    isGlobalEpsilon(epsilon),
    (!isDiffPrivacyMechanism(_);
    isDiffPrivacyMechanism(operation),
    !diffPrivacyMechanismHasEpsilon(operation, _));
    isSqlOutput(operation),
    operationHasResult(operation, sql_output),
    sqlPath(value, sql_output),
    epsilonDiffPrivacy(value, epsilon),
    isGlobalEpsilon(global_epsilon),
    global_epsilon < epsilon;
    isSqlOutput(operation),
    operationHasResult(operation, sql_output),
    sqlPath(value, sql_output),
    deltaDiffPrivacy(value, delta),
    isGlobalDelta(global_delta),
    global_delta < delta;
    isSqlOperation(operation),
    operationHasResult(operation, value),
    operationHasOperator(operation, SQL_JOIN_OPERATOR),
    !joinOperationHasKappa(operation, _),
    !isGroupingJoin(operation),
    sqlPath(value, sql_output),
    isSqlOutput(sql_output_operation),
    operationHasResult(sql_output_operation, sql_output).

#endif //SRC_ANALYSIS_SOUFFLE_EPSILON_ANALYSIS_DL_
