//-----------------------------------------------------------------------------
// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//-----------------------------------------------------------------------------
#ifndef SRC_ANALYSIS_SOUFFLE_ARCSJS_OPERATORS_DL_
#define SRC_ANALYSIS_SOUFFLE_ARCSJS_OPERATORS_DL_

#include "src/analysis/souffle/arcsjs_core.dl"
#include "src/analysis/souffle/taint.dl"

// TODO(#664): Rename/move code shared with SQL into Raksha or Core namespace.
// TODO(#664): Rename/move code not shared with SQL into ArcsJs namespace.
#define ARCSJS_USER_CONSENT_TO_DOWNGRADE \
  as("arcsjs.user_consent_to_downgrade", Operator)
#define ARCSJS_DOWNGRADE_FROM "downgrade_from"
#define ARCSJS_DOWNGRADE_TO "downgrade_to"
#define ARCSJS_USER_CONSENT_TO_DOWNGRADE_DATA_INDEX 0
#define ARCSJS_USER_CONSENT_TO_DOWNGRADE_INTENT_INDEX 1

// Consent to downgrade transforms are special in their propagation of tags:
//    - they propagate all other confidentiality tags from their 'data' argument
//    - *but* downgrade from one user-accepted tag to another.
//    - they propagate all integrity tags from their 'data' argument.
//    - they propagate no confidentiality tags from their 'intent' argument.
//    - they propagate no integrity tags from their 'intent' argument.
//
// NOTE: There is a burden on the runtime to check that:
//    - the intent is shown to the user.
//    - the data is only progagated on a user action that explicitly consents to
//        the downgrade intent.
//    - the intent matches BOTH the downgrade_from and downgrade_to tags.
hasSpecialEdgeRules(ARCSJS_USER_CONSENT_TO_DOWNGRADE).

.decl isArcsJsUserConsentToDowngradeOperation(op: Operation)

isArcsJsUserConsentToDowngradeOperation(op) :-
  isOperation(op),
  operationHasOperator(op, ARCSJS_USER_CONSENT_TO_DOWNGRADE).

// Downgrade from:
.decl arcsJsUserConsentToDowngradeOperationHasDowngradeFromTag(
  op: Operation,
  downgrade_from_tag: Tag
)

// Downgrade to:
.decl arcsJsUserConsentToDowngradeOperationHasDowngradeToTag(
  op: Operation,
  downgrade_to_tag: Tag
)

// Data argument
.decl arcsJsUserConsentToDowngradeOperationHasData(
  op: Operation,
  data_input: AccessPath
)

// Intent argument
.decl arcsJsUserConsentToDowngradeOperationHasIntent(
  op: Operation,
  intent_input: AccessPath
)

arcsJsUserConsentToDowngradeOperationHasDowngradeFromTag(
  op,
  as(downgrade_from_tag, Tag)
),
arcsJsUserConsentToDowngradeOperationHasDowngradeToTag(
  op,
  as(downgrade_to_tag, Tag)
),
arcsJsUserConsentToDowngradeOperationHasData(op, data_input),
arcsJsUserConsentToDowngradeOperationHasIntent(op, intent_input) :-
  isArcsJsUserConsentToDowngradeOperation(op),
  operationHasOperandAtIndex(
    op,
    data_input,
    ARCSJS_USER_CONSENT_TO_DOWNGRADE_DATA_INDEX
  ),
  operationHasOperandAtIndex(
    op,
    intent_input,
    ARCSJS_USER_CONSENT_TO_DOWNGRADE_INTENT_INDEX
  ),
  operationHasAttribute(
    op,
    [ARCSJS_DOWNGRADE_FROM, $StringAttributePayload(downgrade_from_tag)]
  ),
  operationHasAttribute(
    op,
    [ARCSJS_DOWNGRADE_TO, $StringAttributePayload(downgrade_to_tag)]
  ).

isTag(tag) :-
  arcsJsUserConsentToDowngradeOperationHasDowngradeFromTag(_, tag).

isTag(tag) :-
  arcsJsUserConsentToDowngradeOperationHasDowngradeToTag(_, tag).

resolvedEdge(DEFAULT_ARCSJS_OWNER, dataInput, dataOutput) :-
  arcsJsUserConsentToDowngradeOperationHasData(op, dataInput),
  operationHasResult(op, dataOutput).

mayHaveTag(result, DEFAULT_ARCSJS_OWNER, tag) :-
  arcsJsUserConsentToDowngradeOperationHasDowngradeToTag(op, tag),
  tag != ARCSJS_PUBLIC_TAG,
  operationHasResult(op, result).

removeTag(result, DEFAULT_ARCSJS_OWNER, tag) :-
  arcsJsUserConsentToDowngradeOperationHasDowngradeFromTag(op, tag),
  operationHasResult(op, result).

.decl arcsJsUserConsentInvalid(op: Operation)

arcsJsUserConsentInvalid(op) :-
  isArcsJsUserConsentToDowngradeOperation(op),
  !arcsJsUserConsentValid(op).

.decl arcsJsUserConsentValid(op: Operation)

arcsJsUserConsentValid(op) :-
  isArcsJsUserConsentToDowngradeOperation(op),
  // TODO(#709): Support delegation (user action passed from another particle).
  // TODO(#710): Check that the intent is associated with the downgrade tags
  //    and data.
  arcsJsUserConsentToDowngradeOperationHasData(op, _),
  arcsJsUserConsentToDowngradeOperationHasIntent(op, _),
  arcsJsUserConsentToDowngradeOperationHasDowngradeFromTag(
    op,
    downgrade_from_tag
  ),
  arcsJsUserConsentToDowngradeOperationHasDowngradeToTag(
    op,
    downgrade_to_tag
  ),
  downgrade_from_tag != downgrade_to_tag.

.decl arcsJsUserConsentResult(
  op: Operation,
  passOrFail: symbol
)
arcsJsUserConsentResult(op, "FAIL") :- arcsJsUserConsentInvalid(op).
arcsJsUserConsentResult(op, "PASS") :- arcsJsUserConsentValid(op).

violatesPolicy(path, ARCSJS_USER_DOWNGRADE_POLICY, cat("User consent considered invalid at ", path)) :-
  arcsJsUserConsentInvalid(op),
  operationHasResult(op, path).

#undef ARCSJS_USER_CONSENT_TO_DOWNGRADE
#undef ARCSJS_DOWNGRADE_FROM
#undef ARCSJS_DOWNGRADE_TO
#undef ARCSJS_USER_CONSENT_TO_DOWNGRADE_DATA_INDEX
#undef ARCSJS_USER_CONSENT_TO_DOWNGRADE_INTENT_INDEX

#endif // SRC_ANALYSIS_SOUFFLE_ARCSJS_OPERATORS_DL_