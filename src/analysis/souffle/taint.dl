//-----------------------------------------------------------------------------
// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//-----------------------------------------------------------------------------

#ifndef SRC_ANALYSIS_SOUFFLE_TAINT_DL_
#define SRC_ANALYSIS_SOUFFLE_TAINT_DL_

#include "authorization_logic.dl"
#include "dataflow_graph.dl"
#include "tags.dl"

//-----------------------------------------------------------------------------
// Relation Declarations
//-----------------------------------------------------------------------------

// Indicates that an access path definitely has a tag. Differs from mayHaveTag
// below in that mayHaveTag indicates only that it is possible that an
// accessPath has a tag.
.decl hasTag(accessPath: AccessPath, owner: Principal, tag: Tag)

// Declares that `accessPath` may have been tainted with `tag`.
// If false, `accessPath` *definitely* does not have `tag` taint at runtime.
// If true, `accessPath` may have the `tag` taint at runtime.
// NOTE: In practice there may be value in explicitly having a layer of
// indirection in which accessPaths have IFCLabels and just IFCLabels have Tags.
// In this formalization, accessPaths also act as IFCLabels (in the sense that
// they have Tags).
.decl mayHaveTag(accessPath: AccessPath, owner: Principal, tag: Tag)

// The tag for some accessPath is actually removed (by taking into consideration
// the privileges of a party trying to remove it, and as a result of that party
// deciding to remove it). Because here IFC labels are sets of tags (ordered
// by the subset or equals relation), removing a tag from the set corresponds to
// a downgrade by making set of tags on the access path "lower" in the order.
.decl removeTag(path: AccessPath, owner: Principal, tag: Tag)


// Manifests can produce base facts of this form, where usually the principal
// is a particle (and this fact is entered by a code reviewer with no knowledge
// of the taint analysis).
.decl claimNotEdge(principal: Principal, src: AccessPath, dst: AccessPath)

// Indicates that an integrity tag is directly applied to an AccessPath. This
// rule should only be populated with base facts with no derivation to prevent
// us from getting tangled up in stratification issues. Propagation will happen
// via the lacksIntegrityTag rule.
.decl hasAppliedIntegrityTag(accessPath: AccessPath, owner: Principal, integTag: IntegrityTag)

// Integrity tag universe.
.decl isIntegrityTag(integTag: IntegrityTag)

// Removes an integrity tag from some path.
.decl removeIntegrityTag(accessPath: AccessPath, owner: Principal, integTag: IntegrityTag)

// Indicates that a particular AccessPath may lack an integrity tag, which
// indicates that it should not have an integrity tag.
.decl lacksIntegrityTag(accessPath: AccessPath, owner: Principal, integTag: IntegrityTag)

// Indicates that a particular AccessPath may have an integrity tag.
.decl mayHaveIntegrityTag(accessPath: AccessPath, owner: Principal, integTag: IntegrityTag)

// Used to test whether a particular path has a particular integrity tag.
// Should be used as close to top-level checks as possible, and not for
// propagation, to prevent stratification issues.
.decl mustHaveIntegrityTag(accessPath: AccessPath, owner: Principal, integTag: IntegrityTag)

//-----------------------------------------------------------------------------
// Rules
//-----------------------------------------------------------------------------

ownsAccessPath(principal, path) :- says_ownsAccessPath(principal, principal, path).
ownsAccessPath(principal, tgt) :-
  resolvedEdge(principal, src, tgt), ownsAccessPath(principal, src).

// This rule says that a tag may be removed only if the owner of the tag says so.
removeTag(path, owner, tag) :-
   says_removeTag(owner, path, owner, tag).

hasTag(path, owner, tag) :- says_hasTag(owner, path, owner, tag).

mayHaveTag(tgt, owner, tag) :- hasTag(tgt, owner, tag).

mayHaveTag(tgt, owner, tag) :-
    resolvedEdge(owner, src, tgt), mayHaveTag(src, owner, tag), !removeTag(tgt, owner, tag).

// Integrity tag rules.
isIntegrityTag(integTag) :- hasAppliedIntegrityTag(_, _, integTag).
isPrincipal(principal) :- hasAppliedIntegrityTag(_, principal, _).

// Any access point that has no incoming edges and is not directly given an
// integrity tag lacks that integrity tag, as there is no way for it to
// propagate to that AccessPath.
lacksIntegrityTag(ap, owner, integTag) :-
  isAccessPath(ap), isPrincipal(owner), isIntegrityTag(integTag),
  !edge(_, ap), !hasAppliedIntegrityTag(ap, owner, integTag).

// Any point where an integrity tag is removed lacks an integrity tag.
lacksIntegrityTag(ap, owner, integTag) :- removeIntegrityTag(ap, owner, integTag).

// Propagate lack of integrity tag along edges to any destination that did not
// have an integrity tag directly added.
lacksIntegrityTag(dst, owner, integTag) :-
  isAccessPath(src), isAccessPath(dst),
  edge(src, dst), lacksIntegrityTag(src, owner, integTag),
  !hasAppliedIntegrityTag(dst, owner, integTag).

// Any AccessPath that has an IntegrityTag directly applied to it may (really,
// stronger than may, must) have that IntegrityTag.
mayHaveIntegrityTag(ap, owner, integTag) :- hasAppliedIntegrityTag(ap, owner, integTag).

// Any AccessPath that has an incoming resolvedEdge where the source of that
// edge may have an IntegrityTag may also have that IntegrityTag.
mayHaveIntegrityTag(dst, owner, integTag) :-
  resolvedEdge(owner, src, dst), mayHaveIntegrityTag(src, owner, integTag),
  !removeIntegrityTag(dst, owner, integTag).

// An access path must have an integrity tag if it may have the IntegrityTag
// and does not lack the IntegrityTag
mustHaveIntegrityTag(ap, owner, integTag) :-
  isAccessPath(ap), isIntegrityTag(integTag), isPrincipal(owner),
  mayHaveIntegrityTag(ap, owner, integTag), !lacksIntegrityTag(ap, owner, integTag).

//-----------------------------------------------------------------------------
// Universe Populating Rules
//-----------------------------------------------------------------------------
// These rules add objects to the set of things that exist (i.e. relations like
// `isObject(..)`) whenever they are mentioned in other rules.

// Any Principal used in a claim is in the universe of isPrincipal.
isPrincipal(principal) :- says_hasTag(principal, _, _, _).

isAccessPath(path) :- says_hasTag(_, path, _, _).

// Symbols used in hasTag or mayHaveTag are tags
isTag(tag) :- says_hasTag(_, _, _, tag).

// A pair of (base, member) is in this set if the base access path is a non-trivial subpath of the
// member access path.
.decl isMemberOf(base: AccessPath, member: AccessPath)

// The member is a member of the base if it starts with the base plus '.'.
isMemberOf(base, member) :-
  isAccessPath(base),
  isAccessPath(member),
  strlen(base) + 1 < strlen(member),
  cat(base, ".") = substr(member, 0, strlen(base) + 1).

// An access path may have a tag if some subpath to a member field has that tag. This allows
// checking for some inner node in the access path whether any leaf node of that node might have
// a particular tag.
mayHaveTag(base, owner, tag) :-
  isAccessPath(base),
  isAccessPath(member),
  mayHaveTag(member,owner, tag),
  isMemberOf(base, member).

#endif // SRC_ANALYSIS_SOUFFLE_TAINT_DL_
