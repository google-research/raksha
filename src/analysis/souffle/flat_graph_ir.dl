//-----------------------------------------------------------------------------
// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//-----------------------------------------------------------------------------

#ifndef SRC_ANALYSIS_SOUFFLE_FLAT_GRAPH_IR_DL_
#define SRC_ANALYSIS_SOUFFLE_FLAT_GRAPH_IR_DL_

#include "access_path.dl"
#include "dataflow_graph.dl"

// This is a lower-level IR for particles in which:
//      1) nested structs have been flattened into full access path names
//      2) type information has been removed
//      3) paths have been separated into reads (inputs) and writes (outputs)
// This IR is simplified - it contains no more information than what is needed
// to do taint tracking with authorization logic for downgrading.

// There should be a higher-level IR in which particles do have nested structs,
// and a way of converting from that higher-level IR into this one. The
// higher-level IR could either be: 1) just in conventional programming language
// (e.g. C++) data structures, and a conventional language pass that converts
// from the high IR to this one; or 2) another set of datalog data structures,
// with inference rules that convert to this one (perhaps using a relation like
// (convertsTo(highIR, lowIR)). Introducing more IRs between this one and the
// top level IR is also a viable way to implement this

// As an example, if we have
// ---- High IR -----
// someParticle {
//      reads a : someStruct {b: String, c: float}
//      writes d : Int
// }
//
// it should become
// ---- Low IR ------
// someParticle { reads: ["a.b", "a.c"], writes: ["d"] }

//-----------------------------------------------------------------------------
// Type Declarations
//-----------------------------------------------------------------------------
.type FlatParticle = FlatParticle { readPaths: AccessPathList,
    writtenPaths: AccessPathList }
.type FlatParticleName <: symbol

//-----------------------------------------------------------------------------
// Predicate Declarations
//-----------------------------------------------------------------------------
// A variable n is bound to a particle body p. This is a convenient way to refer
// to a particle in more than one place without needing to redifine it.
// This is assentially `let n := p`, where p is a particle definition.
.decl bindFlatParticle(name: FlatParticleName, particle: FlatParticle)

//-----------------------------------------------------------------------------
// Universe Predicates
//-----------------------------------------------------------------------------
// These predicates say that some object is a member of the universe for that
// object. These are needed when working in Datalog to ensure that a fixpoint
// can be reached. In practice, to dismiss error messages about variables not
// being grounded when defining new rules. For example, if there is an error
// that 'a' `FlatParticle` is not grounded when defining some rule, simply add
// `isFlatParticle(a)` to the RHS of the rule.
.decl isFlatParticle(particle: FlatParticle)


// populates the edge(path1: AccessPath, path2: AccessPath) relation defined in
// `dataflow_graph.dl" when given a graph of particles in the low-level IR
// defined in flat_graph_ir.dl
edge(from, to) :-
    isFlatParticle($FlatParticle(inputs, outputs)),
    accessPathListContains(inputs, from),
    accessPathListContains(outputs, to).

//-----------------------------------------------------------------------------
// Universe Populating Rules
//-----------------------------------------------------------------------------
// These are rules that add objects to the universe whenever they are mentioned
// in rules. These are for convenience and to reduce errors caused by forgetting
// to add thngs to the universe.
isAccessPathList(list) :- isFlatParticle($FlatParticle(list, _)).
isAccessPathList(list) :- isFlatParticle($FlatParticle(_, list)).

isFlatParticle(path) :- bindFlatParticle(_, path).

#endif // SRC_ANALYSIS_SOUFFLE_FLAT_GRAPH_IR_DL_

