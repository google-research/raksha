#ifndef SRC_ANALYSIS_SOUFFLE_ANALYZE_TAG_CHECKS_TEST_HELPER_DL_
#define SRC_ANALYSIS_SOUFFLE_ANALYZE_TAG_CHECKS_TEST_HELPER_DL_

#include "authorization_logic.dl"
#include "taint.dl"

.type TestAspectName <: symbol

// Any tests in this rule have passed. Should usually be populated by TEST_CASE rather than
// directly used. If it is directly used, the test must be "declared" using an allTests fact on the
// aspect.
.decl testPasses(testAspectName: TestAspectName)

// All test aspects tested by a particular test. Should usually be populated by TEST_CASE rather
// than directly used.
.decl allTestsAndCaseNum(testAspectName: TestAspectName, caseNum: number)

.decl allTests(testAspectName: TestAspectName)
.output allTests(IO=stdout, delimiter=",")

allTests(testAspectName) :- allTestsAndCaseNum(testAspectName, _).

.decl duplicateTestCaseNames(testAspectName: TestAspectName)
.output duplicateTestCaseNames(IO=stdout, delimiter=",")

// Catch if the user provides duplicate test aspect names. We can use this to print an error in the
// test handler.
duplicateTestCaseNames(testAspectName) :-
  allTestsAndCaseNum(testAspectName, caseNum1),
  allTestsAndCaseNum(testAspectName, caseNum2),
  caseNum1 != caseNum2.

// If the testFails relation has any contents, then the test has failed. Should not be populated
// directly.
.decl testFails(testAspectName: TestAspectName)
.output testFails(IO=stdout, delimiter=",")

testFails(testAspectName) :- allTests(testAspectName), !testPasses(testAspectName).

#ifdef ALL_PRINCIPALS_OWN_ALL_TAGS
// For the fact tests, consider all principals as owning all tags. This allows us to avoid writing
// ownership relations, which are not the point of those tests.
ownsTag(principal, tag) :- isPrincipal(principal), isTag(tag).
#endif

// TEST_CASE is constructed so that it can take the place of a rule head. It "declares" a test
// aspect via the allTestsAndCaseNum fact and sets up a testPasses head for the aspect in question.
// The $ functor used in the argument to allTestsAndCaseNum allows assigning each test case
// a unique number, useful for catching if the user accidentally used the same name for two
// different test cases.
// Example usage:
//
// TEST_CASE("my_test_aspect") :- MyRelation(x), !MyOtherRelation(x).
//
// All recipes with a TEST_CASE head shall be seen as a condition that must be met for the test to
// pass.
#define TEST_CASE(test_aspect_name) \
  allTestsAndCaseNum(test_aspect_name, $) :- 1 = 1. \
  testPasses(test_aspect_name)

#define CHECK_TAG_PRESENT(access_path, owner, tag) \
  isAccessPath(access_path). \
  TEST_CASE(cat(cat(cat("is_", tag), "_present_in_"), access_path)) :- \
    isAccessPath(access_path), mayHaveTag(access_path, owner, tag)

#define CHECK_TAG_NOT_PRESENT(access_path, owner, tag) \
  isAccessPath(access_path). \
  TEST_CASE(cat(cat(cat("is_", tag), "_not_present_in_"), access_path)) :- \
    isAccessPath(access_path), !mayHaveTag(access_path, owner, tag)

#endif // SRC_ANALYSIS_SOUFFLE_ANALYZE_TAG_CHECKS_TEST_HELPER_DL_
