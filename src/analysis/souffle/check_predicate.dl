//-----------------------------------------------------------------------------
// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//-----------------------------------------------------------------------------
#ifndef SRC_ANALYSIS_SOUFFLE_CHECK_PREDICATE_DL_
#define SRC_ANALYSIS_SOUFFLE_CHECK_PREDICATE_DL_

#include "src/analysis/souffle/authorization_logic.dl"
#include "src/analysis/souffle/dataflow_graph.dl"
#include "src/analysis/souffle/tags.dl"

.type Bool <: number

.type CheckPredicate =
  CP_TagPresence { ap: AccessPath, principal: Principal, tag: Tag }
  | CP_And { lhs: CheckPredicate, rhs: CheckPredicate }
  | CP_Or { lhs: CheckPredicate, rhs: CheckPredicate }
  | CP_Implies { antecedent: CheckPredicate, consequent: CheckPredicate }
// Note: CP_Not will have a result that is the negation of its `inner`
// field. So `$CP_Not(true) -> false` and `$CP_Not(false) -> true`.
  | CP_Not { inner: CheckPredicate }

// A check of some predicate on tags.
.decl checkP(name: symbol, pred: CheckPredicate)

// Deconstruct all top-level check predicates to get subpredicates here.
.decl checkSubExprs(pred: CheckPredicate)
checkSubExprs(pred) :- checkP(_, pred).
checkSubExprs(lhs), checkSubExprs(rhs) :- checkSubExprs($CP_And(lhs, rhs)).
checkSubExprs(lhs), checkSubExprs(rhs) :- checkSubExprs($CP_Or(lhs, rhs)).
checkSubExprs(ant), checkSubExprs(cons) :- checkSubExprs($CP_Implies(ant, cons)).
checkSubExprs(inner) :- checkSubExprs($CP_Not(inner)).

// Evaluate predicates based upon their subpredicates. The base case, the
// `TagPresence` branch, requires looking at the `mayHaveTag` relation, so we
// define it in taint.dl instead of here.
.decl predicateEval(pred: CheckPredicate, result: Bool)
predicateEval($CP_Not(inner), lnot subResult) :-
  checkSubExprs($CP_Not(inner)), predicateEval(inner, subResult).
predicateEval($CP_And(lhs, rhs), lhsResult land rhsResult) :-
  checkSubExprs($CP_And(lhs, rhs)), predicateEval(lhs, lhsResult), predicateEval(rhs, rhsResult).
predicateEval($CP_Or(lhs, rhs), lhsResult lor rhsResult) :-
  checkSubExprs($CP_Or(lhs, rhs)), predicateEval(lhs, lhsResult), predicateEval(rhs, rhsResult).
predicateEval($CP_Implies(ant, cons), (lnot antResult) lor (antResult land consResult)) :-
  checkSubExprs($CP_Implies(ant, cons)), predicateEval(ant, antResult),
  predicateEval(cons, consResult).

.decl checkAndResult(name: symbol, result: symbol)

checkAndResult(name, "PASS") :- checkP(name, pred), predicateEval(pred, result), result != 0.

checkAndResult(name, "FAIL") :- checkP(name, pred), predicateEval(pred, result), result = 0.

// Relations used to support tests involving check facts. Not present in
// production builds.
#ifdef TEST

// A check with an attached expectation on whether a test expects this check to
// pass or fail.
.decl checkAndExpectation(name: symbol, pred: CheckPredicate, expectation: symbol)
.input checkAndExpectation(delimiter=";")

checkP(name, pred) :- checkAndExpectation(name, pred, _).

// Produce a list of expected checkAndResults based upon the checks and
// checkAndExpectations given to a test.
.decl expectedCheckAndResult(name: symbol, result: symbol)

// For checks listed in checkAndExpectation, grab the expectation directly from checkAndExpectation.
expectedCheckAndResult(name, result) :- checkAndExpectation(name, _, result).
// For checks listed only in checkP, expect that that check passes.
expectedCheckAndResult(name, "PASS") :- checkP(name, _), !checkAndExpectation(name, _, _).

#endif // TEST

#endif // SRC_ANALYSIS_SOUFFLE_CHECK_PREDICATE_DL_
