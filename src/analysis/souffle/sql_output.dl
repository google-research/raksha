//-----------------------------------------------------------------------------
// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//-----------------------------------------------------------------------------
#ifndef SRC_ANALYSIS_SOUFFLE_SQL_OUTPUT_DL_
#define SRC_ANALYSIS_SOUFFLE_SQL_OUTPUT_DL_

#include "src/analysis/souffle/taint.dl"

// Note: this will need to change when we integrate auth logic into the SQL
// verifier.
#define DEFAULT_SQL_OWNER "sql"
#define DEFAULT_SQL_POLICY_NAME as("sql", PolicyName)
#define SQL_OUTPUT_OPERATOR "sql.sql_output"

.decl isSqlOutput(sqlOutputOperation: Operation)

isSqlOutput(op) :- isOperation(op),
                  operationHasActor(op, DEFAULT_SQL_OWNER),
                  operationHasOperator(op, SQL_OUTPUT_OPERATOR).

.decl sqlOutputHasConfidentialTag(sqlOutputOperation: Operation, tag: Tag)

sqlOutputHasConfidentialTag(op, tag) :-
  isSqlOutput(op),
  operationHasResult(op, result),
  isTag(tag), mayHaveTag(result, DEFAULT_SQL_OWNER, tag).

.decl sqlOutputResult(sqlOutputOperation: Operation, passOrFail: symbol)

sqlOutputResult(op, "FAIL") :- sqlOutputHasConfidentialTag(op, _).
sqlOutputResult(op, "PASS") :- isSqlOutput(op), !sqlOutputHasConfidentialTag(op, _).

violatesPolicy("violates", DEFAULT_SQL_POLICY_NAME, cat("Output has confidential tag: ", tag)) :- sqlOutputHasConfidentialTag(op, tag).

#endif // SRC_ANALYSIS_SOUFFLE_SQL_OUTPUT_DL_
