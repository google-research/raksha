//-----------------------------------------------------------------------------
// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//-----------------------------------------------------------------------------
#ifndef SRC_ANALYSIS_SOUFFLE_OPERATIONS_DL_
#define SRC_ANALYSIS_SOUFFLE_OPERATIONS_DL_

#include "src/analysis/souffle/attributes.dl"
#include "src/analysis/souffle/dataflow_graph.dl"

// The symbol representing the operator. For operations commonly represented by
// a single character operator (such as +, =, /, *, etc), the operator will be
// the tsring containing that character.
.type Operator <: symbol

// A list of operands, used for gathering all operators in a single relation
// regardless of arity. Useful for rules that apply to any operation.
.type OperandList = [ operand: AccessPath, next: OperandList ]

// An Operation.
.type Operation = [owner: Principal, operator: Operator, result: AccessPath,
                   operandList: OperandList, attributes: AttributeList]

// Operation universe.
.decl isOperation(operation: Operation)

// BINARY_OPERATION is a convenience macro for the very-common-case of binary operations.
#define BINARY_OPERATION(owner, operator, result, attrs, input1, input2) \
isOperation([owner, operator, result, [input1, [input2, nil]], attrs])

// Explode the operand lists so that we can extract the heads of each sublist
// to get a mapping from operations to their operands.
.decl operationHasOperandHelper(operation: Operation, partialList: OperandList)

operationHasOperandHelper([owner, op, result, operandList, attrs], operandList) :-
  isOperation([owner, op, result, operandList, attrs]).
operationHasOperandHelper(operation, tail) :-
  operationHasOperandHelper(operation, [_, tail]).

// True if `operand` is an argument of `operation`.
.decl operationHasOperand(operation: Operation, operand: AccessPath)

operationHasOperand(operation, operand) :-
  isOperation(operation), operationHasOperandHelper(operation, [operand, _]).

// A helper relation that produces all partial attribute lists of an
// `Operation`.
.decl operationToPartialAttributeLists(operation: Operation, attributes: AttributeList)
operationToPartialAttributeLists([owner, op, result, operandList, attrs], attrs) :-
  isOperation([owner, op, result, operandList, attrs]).
operationToPartialAttributeLists(op, tail) :- operationToPartialAttributeLists(op, [_, tail]).

// A mapping from an `Operation` to each individual `Attribute` on that
// `Operation`.
.decl operationToAttribute(op: Operation, attr: Attribute)
operationToAttribute(op, attr) :- operationToPartialAttributeLists(op, [attr, _]).

#endif // SRC_ANALYSIS_SOUFFLE_OPERATIONS_DL_
