// Represents an actual microphone within a smart mic listening to audio.
particle MicIn
  audio: writes AudioData { }
  claim audio is userSpeech

// The permissions stubs below are not real devices. To allow guests to
// influence the policy decisions of the smart mic, the smart mic is
// representing the data gathered by the micrpohone as if it flowed through the
// smartphones of users to allow their policies to attach tags to that data.
//
// Note: the permissions stubs add tags of the form userSpeechOfUserX. In
// reality, this would likely be written more like the syntax that @aferr
// proposed in PR #187, where tags can be refined by the user that introduced
// them. The point here is that these stubs are adding a variant on the
// userSpeech family of tags that imposes the policy preferences of the user
// that they serve.
particle UserATainter
  audio: reads writes AudioData { }

particle UserBTainter
  audio: reads writes AudioData { }

particle UserCTainter
  audio: reads writes AudioData { }
  claim audio is asrDisallowed

// Represents the CPU within the mic.
particle MicCompute
  audioIn: reads AudioData { }
  asrNeuralNet: reads ASRNeuralNet { }
  asrStorageConn: writes ASRData { }
  // Claim that MicCompute removes the label from userSpeech to
  // textTranscript.
  // Note: this is intended to remove not just the userSpeech from the MicIn
  // particle, but also the userSpeechOf tags that flow from the user
  // permission stubs. This assumes that in our new policy language, we allow
  // downgrading from a tag with a particular user refinement to a different
  // tag with that same user refinement.
  check audioIn is not asrDisallowed

particle SpeechToTextStorageSink
  speechToTextIn: reads ASRData { }

// This recipe represents the mic operating in a room with no guest storage
// permissions.
recipe DoASRNoGuests
  m1AsrNetStorage: create
  m1AsrStorage: create
  MicIn
    audio: writes micAudio
  MicCompute
    audioIn: reads micAudio
    asrNeuralNet: reads m1AsrNetStorage
    asrStorageConn: writes m1AsrStorage
  SpeechToTextStorageSink
    speechToTextIn: reads m1AsrStorage

// This recipe represents the mic operating in a room where UserA and UserB are
// having a conversation.
recipe DoASRUserAAndUserB
   m1AsrNetStorage: create
   m1AsrStorage: create
   MicIn
     audio: writes micAudio
   UserATainter
     audio: reads writes micAudio
   UserBTainter
     audio: reads writes micAudio
   MicCompute
     audioIn: reads micAudio
     asrNeuralNet: reads m1AsrNetStorage
     asrStorageConn: writes m1AsrStorage
   SpeechToTextStorageSink
     speechToTextIn: reads m1AsrStorage

// This recipe represents UserC entering the room. The policy of UserC does not
// allow storing information derived from their voice; this means that this
// recipe must reject the connection from UserC, as the check in
// SpeechToTextStorageSink will fail otherwise.
recipe DoASRUserAAndUserBAndUserC
  m1AsrNetStorage: create
  m1AsrStorage: create
  MicIn
    audio: writes micAudio
  UserATainter
    audio: reads writes micAudio
  UserBTainter
    audio: reads writes micAudio
  UserCTainter
    audio: reads writes micAudio
  MicCompute
    audioIn: reads micAudio
    asrNeuralNet: reads m1AsrNetStorage
    asrStorageConn: writes m1AsrStorage
  SpeechToTextStorageSink
    speechToTextIn: reads m1AsrStorage
