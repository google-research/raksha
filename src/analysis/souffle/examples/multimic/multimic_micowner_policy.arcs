// Policy for multimic as provided on the user’s mic

schema AudioData { }
schema ASRData { }
schema StorageCredentials { }

@intendedPurpose('
  Allow multimic ASR.

  ALLOWED EGRESSES: ASR.
  ALLOWED USAGES: Text to speech, demos.
  ALLOWED POPULATIONS: Production builds.
')
// The priority order in which principal policies should be applied.
// Lower numbers mean higher trust. Any principal not given a priority shall
// be considered at the lowest priority. The number could easily be replaced
// with an enum if these should be given names.
//SPECULATIVE:
//@PrincipalPriority(“UserA”, 0)
//@PrincipalPriority(“SpeechToTextSoftwareVendor”, 5)
//@PrincipalPriority(“UserB”, 50)
//@PrincipalPriority(“UserC”, 50)
//SPECULATIVE:
// These are actions that can be taken to accomodate other users. In this case,
// UserA's mic will attempt to allow blocking the data by blocking data on edges
// in the dataflow graph to accomodate guest users. However, if these
// accomodations cause problems of their own (for instance, by blocking a QoS
// tag) then the default final resort of throwing out the guest policy will be
// taken.
// @allowedPolicyAccomodations(tactics: ['block'])
@egressType("Disk")
policy UserASmartMicOwnerPolicy {
  // textTranscript is a hypothetical label describing text derived from user
  // speech instead of the raw audio itself. UserA considers textTranscript as
  // not very sensitive.
  @allowedUsage(label: 'textTranscript', usageType: '*')
  @allowedRetention(medium: 'Ram', encryption: false)
  @allowedRetention(medium: 'Disk', encryption: false)

// SPECULATIVE:
// The @canDowngrade annotation indicates principals that can downgrade labels.
// In this case, UserA trusts MicCompute to correctly downgrade its raw
// userSpeech to less sensitive data.
// @canDowngrade(label: userSpeech, principals: ['MicCompute'])
  from ASRData access { }

// SPECULATIVE:
// We have discussed qualifying tags with the owners of those tags, so that
// multiple principals can use the same tag without causing collisions in the
// dataflow graph. In this case, however, the mic is creating data from signal
// that many users may have a stake in. Open the tag up for this behavior by
// making it a sharedTag.
// @sharedTag('userSpeech')

// Without the downgrading, UserA considers userSpeech to be sensitive.
  @allowedUsage(label: 'userSpeech', usageType: "noEgress")
  @allowedRetention(medium: 'Ram', encryption: true)
  @maxAge('1hour')
  from AudioData access { }

// StorageCredentials cannot be stored or egressed.
  @allowedUsage(label: 'fullStoragePermissions', usageType: "noEgressNorStorage")
  @allowedUsage(label: 'delegatedPermissions', usageType: "noEgressNorStorage")
// SPECULATIVE:
// canDowngrade(label: 'fullStoragePermissions', principals: ['DelegateStorePermissions'])
  from StorageCredentials access { }

}

