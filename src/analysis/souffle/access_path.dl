//-----------------------------------------------------------------------------
// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//-----------------------------------------------------------------------------
#ifndef SRC_ANALYSIS_SOUFFLE_ACCESS_PATH_DL_
#define SRC_ANALYSIS_SOUFFLE_ACCESS_PATH_DL_

// We will use the access path abtraction to refer to data during analysis.
// Consider the following data schema (not a valid syntax):
//  schema A {
//    a: Integer
//    b: schema B {
//      bf: String
//    }
//  }
//
// Suppose that data with schema A is stored in a database that is accessible
// through a handle `h`. `h.a`, `h.b`, and `h.b.bf` are all examples of access
// paths. For the time being, we will use a `symbol` to represent access paths.
// However, in the long term, it would make sense to define an ADT for this.
//
.type AccessPath <: symbol
.decl isAccessPath(path: AccessPath)

.type AccessPathList = Nil {} | Cons {a: AccessPath, l: AccessPathList }
.decl isAccessPathList(list: AccessPathList)

// This relation is true if `pathList` contains `path`.
.decl accessPathListContains(pathList: AccessPathList, path: AccessPath)

//-----------------------------------------------------------------------------
// Rules
//-----------------------------------------------------------------------------
accessPathListContains($Cons(head, rest), head) :-
    isAccessPathList($Cons(head, rest)).
accessPathListContains($Cons(head, rest), path) :-
    isAccessPathList($Cons(head, rest)),
    accessPathListContains(rest, path).

isAccessPath(path) :- accessPathListContains(_, path).
isAccessPath(path) :- isAccessPathList($Cons(path, _)).
isAccessPathList(list) :- isAccessPathList($Cons(_, list)).

#endif // SRC_ANALYSIS_SOUFFLE_ACCESS_PATH_DL_
