//-----------------------------------------------------------------------------
// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//-----------------------------------------------------------------------------
#ifndef SRC_ANALYSIS_SOUFFLE_TAGS_DL_
#define SRC_ANALYSIS_SOUFFLE_TAGS_DL_

//-----------------------------------------------------------------------------
// Type Declarations
//-----------------------------------------------------------------------------
// An information flow Label which in this model is a set of taint Tags. One
// label L1 flows to another L2 if L1 is a subset or equal to L2.

// A list of tag parameters, useful for handling parameterized tags regardless
// of arity.
.type TagArguments = [ argument: Tag, next: TagArguments ]

.decl tagName(tag: Tag, name: symbol)
tagName([name, arguments], name) :- isTag(tag), tag = [name, arguments].

.decl tagArguments(tag: Tag, arguments: TagArguments)
tagArguments([name, arguments], arguments) :- isTag(tag), tag=[name, arguments].

// A symbol and a set of (optional) arguments.
// The symbol represents a taint (or information flow) tag. These would be
// strings of the form "secret", "public", "timestampInMs", etc. Just like
// `AccessPath`, it would make sense to define an ADT in the long term.
// The arguments represent additional information that is used to parameterize
// some specific kinds of tags (e.g. making confidentiality conditional)
.type Tag = [name: symbol, arguments:  TagArguments]
.decl isTag(tag: Tag)

.decl isTagNamed(tag_named: symbol)
isTagNamed(tag_name) :- isTag(tag), tagName(tag, tag_name).

// An access path marked with an integrity tag indicates that some property
// must be true of the data at the given AccessPath. The conservative
// over-approximation for propagating an integrity tag is that a node has an
// integrity tag only if all of its predecessors have that integrity tag.
.type IntegrityTag = [name: symbol, arguments:  TagArguments]

#endif // SRC_ANALYSIS_SOUFFLE_TAGS_DL_
