// Show that grouping the ANDs in a join key in different ways does not throw
// off the grouping join detector.

module m0 {
  block b0 {
    %0 = arbitrary[]()
    %1 = arbitrary[]()
    %2 = arbitrary[]()
    %3 = arbitrary[]()
    %4 = arbitrary[]()
    %5 = arbitrary[]()
    %6 = arbitrary[]()
    %7 = arbitrary[]()
    %group_by_cols1 = sql.group_by_columns[](%0, %1, %2, %3)
    %group_by1_1 = sql.group_by[](%0, %group_by_cols1)
    %group_by1_2 = sql.group_by[](%1, %group_by_cols1)
    %group_by1_3 = sql.group_by[](%2, %group_by_cols1)
    %group_by1_4 = sql.group_by[](%3, %group_by_cols1)
    %group_by_cols2 = sql.group_by_columns[](%4, %5, %6, %7)
    %group_by2_1 = sql.group_by[](%4, %group_by_cols2)
    %group_by2_2 = sql.group_by[](%5, %group_by_cols2)
    %group_by2_3 = sql.group_by[](%6, %group_by_cols2)
    %group_by2_4 = sql.group_by[](%7, %group_by_cols2)
    %eq1 = core.equals[](%group_by1_1, %group_by2_1)
    %eq2 = core.equals[](%group_by1_2, %group_by2_2)
    %eq3 = core.equals[](%group_by1_3, %group_by2_3)
    %eq4 = core.equals[](%group_by1_4, %group_by2_4)
    %flat_key = core.and[](%eq1, %eq2, %eq3, %eq4)
    %join1 = sql.join[join_type: "INNER"](%group_by1_1, %flat_key)
    %and_left_pair = core.and[](%eq1, %eq2) 
    %bad_join1 = sql.join[join_type: "INNER"](%group_by1_1, %and_left_pair)
    %and_left_triple = core.and[](%and_left_pair, %eq3) 
    %bad_join2 = sql.join[join_type: "INNER"](%group_by1_1, %and_left_triple)
    %left_key = core.and[](%and_left_triple, %eq4) 
    %join2 = sql.join[join_type: "INNER"](%group_by1_1, %left_key)
    %and_right_pair = core.and[](%eq4, %eq3) 
    %bad_join3 = sql.join[join_type: "INNER"](%group_by1_1, %and_right_pair)
    %and_right_triple = core.and[](%and_right_pair, %eq2) 
    %bad_join4 = sql.join[join_type: "INNER"](%group_by1_1, %and_right_triple)
    %right_key = core.and[](%and_right_triple, %eq1) 
    %join3 = sql.join[join_type: "INNER"](%group_by1_1, %right_key)
    %and_middle = core.and[](%eq2, %eq3) 
    %bad_join5 = sql.join[join_type: "INNER"](%group_by1_1, %and_middle)
    %and_outer =  core.and[](%eq1, %eq4) 
    %bad_join6 = sql.join[join_type: "INNER"](%group_by1_1, %and_outer)
    %weird_full_key =  core.and[](%and_outer, %and_middle) 
    %join4 = sql.join[join_type: "INNER"](%group_by1_1, %weird_full_key)
  }
}
