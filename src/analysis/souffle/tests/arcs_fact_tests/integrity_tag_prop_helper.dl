#include "src/analysis/souffle/taint.dl"
#include "src/analysis/souffle/fact_test_helper.dl"

.decl expectHasIntegrityTag(ap: AccessPath, owner: Principal, tag: IntegrityTag)

// Ensure that the expected and actual integrity tag relations are equivalent.
.decl expectedTagNotPresent(ap: AccessPath, owner: Principal, tag: IntegrityTag)
expectedTagNotPresent(ap, owner, tag) :-
  expectHasIntegrityTag(ap, owner, tag), !mustHaveIntegrityTag(ap, owner, tag).

.decl unexpectedTagPresent(ap: AccessPath, owner: Principal, tag: IntegrityTag)
unexpectedTagPresent(ap, owner, tag) :-
  mustHaveIntegrityTag(ap, owner, tag), !expectHasIntegrityTag(ap, owner, tag).

.output expectedTagNotPresent(IO=stdout, delimiter=",")
.output unexpectedTagPresent(IO=stdout, delimiter=",")

// These help with debugging if the test fails.
.output hasAppliedIntegrityTag(IO=stdout, delimiter=",")
.output mustHaveIntegrityTag(IO=stdout, delimiter=",")

TEST_CASE("expected_tag_not_present_is_empty") :- count : { expectedTagNotPresent(_, _, _) } = 0.
TEST_CASE("unexpected_tag_present_is_empty") :- count : { unexpectedTagPresent(_, _, _) } = 0.
TEST_CASE("num_expected_matches_num_actual_and_not_zero") :-
  count_expected = count : { expectHasIntegrityTag(_, _, _) },
  count_actual = count : { mustHaveIntegrityTag(_, _, _) },
  count_expected != 0,
  count_actual != 0,
  count_expected = count_actual.
