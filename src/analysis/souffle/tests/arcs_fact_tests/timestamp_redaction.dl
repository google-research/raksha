//-----------------------------------------------------------------------------
// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//-----------------------------------------------------------------------------
#include "src/analysis/souffle/taint.dl"
#include "src/analysis/souffle/fact_test_helper.dl"
#include "src/analysis/souffle/tests/arcs_fact_tests/integrity_tag_prop_helper.dl"
#include "src/analysis/souffle/tests/arcs_fact_tests/confidentiality_tag_prop_helper.dl"

// Show that we can handle a simple SQL policy example in which a millisecond
// timestamp is redacted to a second timestamp by dividing by 1000 and then put
// into millisecond form by multiplying by 1000.

isAccessPath("a").
isAccessPath("b").
isAccessPath("div_result").
isAccessPath("c").
isAccessPath("final_result").

BINARY_OPERATION("owner", "/", "div_result", nil, "a", "b").
BINARY_OPERATION("owner", "*", "final_result", nil, "div_result", "c").

// "a" contains a millsecond-granularity timestamp.
hasAppliedIntegrityTag("a", "owner", ["TimestampMilliseconds", nil]).
// Millisecond granularity timestamps are considered sensitive.
says_hasTag("owner", "a", "owner", ["SensitiveTimestamp", nil]).
// A different confidentiality tag.
says_hasTag("owner", "a", "owner", ["OtherConfTag", nil]).
// Say that "a" has some unrelated confidentiality property.
// Access path "b" and "c" are both the constant expression 1000.
hasAppliedIntegrityTag("b", "owner", ["Constant_1000", nil]).
hasAppliedIntegrityTag("c", "owner", ["Constant_1000", nil]).

// An AST-matching policy that says that "TimestampMilliseconds" divided by
// 1000 are "TimestampSeconds". Also, that this is sufficient for removing the
// "TimestampMilliseconds" confidentiality tag.
mustHaveIntegrityTag(result, owner, ["TimestampSeconds", nil]),
removeTag(result, owner, ["SensitiveTimestamp", nil]) :-
  BINARY_OPERATION(owner, "/", result, nil, op1, op2),
  mustHaveIntegrityTag(op1, owner, ["TimestampMilliseconds", nil]),
  mustHaveIntegrityTag(op2, owner, ["Constant_1000", nil]).

// An AST matching policy that says that "TimestampSeconds", multiplied by
// 1000, is now a "TimestampMillisecondsRedacted".
mustHaveIntegrityTag(result, owner, ["TimestampMillisecondsRedacted", nil]) :-
  BINARY_OPERATION(owner, "*", result, nil, op1, op2),
  mustHaveIntegrityTag(op1, owner, ["TimestampSeconds", nil]),
  mustHaveIntegrityTag(op2, owner, ["Constant_1000", nil]).

// Only "a" should have "SensitiveTimestamp", as the first policy rule should
// remove it.
expectMayHaveTag("a", "owner", ["SensitiveTimestamp", nil]).

// "OtherConfTag", on the other hand, is not removed and should propagate to
// all operation results.
expectMayHaveTag("a", "owner", ["OtherConfTag", nil]).
expectMayHaveTag("div_result", "owner", ["OtherConfTag", nil]).
expectMayHaveTag("final_result", "owner", ["OtherConfTag", nil]).

// "a" has "TimestampMilliseconds" because it was directly added there.
expectHasIntegrityTag("a", "owner", ["TimestampMilliseconds", nil]).

// Similar to "b" and "c" with "Constant_1000".
expectHasIntegrityTag("b", "owner", ["Constant_1000", nill]).
expectHasIntegrityTag("c", "owner", ["Constant_1000", nill]).

// The first policy rule should apply "TimestampSeconds" to "div_result".
expectHasIntegrityTag("div_result", "owner", ["TimestampSeconds", nill]).
// The second policy rule should apply "TimestampMillisecondsRedacted" to
// "final_result".
expectHasIntegrityTag("final_result", "owner", ["TimestampMillisecondsRedacted", nill]).
