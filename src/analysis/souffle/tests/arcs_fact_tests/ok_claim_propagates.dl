// claim propagates through a chain of particles
// Note: we have changed this test from the original Arcs manifest test by renaming the tag
// "trusted" to "userSelection", as the tag in this test spreads like a confidentiality-aspect tag.
// #Ingress: P1
// #OK
//particle P1
//  foo: writes Foo {}
//  claim foo is userSelection
//particle P2
//  bar: reads Foo {}
//  foo: writes Foo {}
//particle P3
//  bar: reads Foo {}
//  check bar is userSelection
//recipe R
//  P1
//    foo: writes h1
//  P2
//    bar: reads h1
//    foo: writes h2
//  P3
//    bar: reads h2
//
// The below fact-based test is hand-derived from the above Arcs manifest test.
#include "taint.dl"
#include "fact_test_helper.dl"

claimHasTag("R.P1.foo", "userSelection").
edge("R.P1.foo", "R.h1.Foo").
edge("R.h1.Foo", "R.P2.bar").
edge("R.P2.bar", "R.P2.foo").
edge("R.P2.foo", "R.h2.Foo").
edge("R.h2.Foo", "R.P3.bar").

TEST_CASE("initial_has_secrecy") :- mayHaveSecrecyTag("R.P1.foo", "userSelection").
TEST_CASE("initial_has_integrity") :- mustHaveIntegrityTag("R.P1.foo", "userSelection").
// This test passes if R.P3.bar has the userSelection tag.
TEST_CASE("ok_claim_propagates_secrecy") :- mayHaveSecrecyTag("R.P3.bar", "userSelection").
TEST_CASE("ok_claim_not_propagates_integrity") :-
  allIntegrityTags("userSelection"), !mustHaveIntegrityTag("R.P3.bar", "userSelection").
