#include "taint.dl"
#include "fact_test_helper.dl"

.decl expectHasIntegTag(ap: AccessPath, tag: IntegTag)

isAccessPath("a").
isAccessPath("b").
isAccessPath("c").
isAccessPath("d").
isAccessPath("e").
isAccessPath("f").
isAccessPath("g").
isAccessPath("h").
isAccessPath("i").
isAccessPath("j").
isAccessPath("k").
// Intentionally skipping "l" so it is not confused with "1".
//isAccessPath("l").
isAccessPath("m").
isAccessPath("n").
isAccessPath("o").

// Make "c" the target of edges from "a" and "b".
edge("a", "c").
edge("b", "c").

// Make "e" the target of edges from "c" and "d".
edge("c", "e").
edge("d", "e").

// If we apply "integ1" and "integ2" to "a" and "b", they should also appear on
// "c".
directHasIntegTag("a", "integ1").
directHasIntegTag("b", "integ1").

directHasIntegTag("a", "integ2").
directHasIntegTag("b", "integ2").

expectHasIntegTag("a", "integ1").
expectHasIntegTag("b", "integ1").
expectHasIntegTag("c", "integ1").

expectHasIntegTag("a", "integ2").
expectHasIntegTag("b", "integ2").
expectHasIntegTag("c", "integ2").

// If we apply "integ1" to d, it should also appear on e.
directHasIntegTag("d", "integ1").

expectHasIntegTag("d", "integ1").
expectHasIntegTag("e", "integ1").

// If we apply "integ3" to "a" and not "b", however, it should not appear on
// "c".
directHasIntegTag("a", "integ3").
expectHasIntegTag("a", "integ3").

// Similarly if we apply "integ4" only to "b".
directHasIntegTag("b", "integ4").
expectHasIntegTag("b", "integ4").

// If we apply "integ5" to "c" and "d" directly, it should appear on "e".
directHasIntegTag("c", "integ5").
directHasIntegTag("d", "integ5").

expectHasIntegTag("c", "integ5").
expectHasIntegTag("d", "integ5").
expectHasIntegTag("e", "integ5").

// Check that this works correctly with numbers of children other than 2.

// "g" has one child, "f".
isAccessPath("f").
isAccessPath("g").

edge("f", "g").

directHasIntegTag("f", "integ6").
expectHasIntegTag("f", "integ6").
expectHasIntegTag("g", "integ6").

directHasIntegTag("g", "integ7").
expectHasIntegTag("g", "integ7").

// "k" has 3 children, "h", "i", and "j"
edge("h", "k").
edge("i", "k").
edge("j", "k").

directHasIntegTag("h", "integ8").
directHasIntegTag("i", "integ8").
directHasIntegTag("j", "integ8").

expectHasIntegTag("h", "integ8").
expectHasIntegTag("i", "integ8").
expectHasIntegTag("j", "integ8").
expectHasIntegTag("k", "integ8").

directHasIntegTag("h", "integ9").
directHasIntegTag("i", "integ9").
expectHasIntegTag("h", "integ9").
expectHasIntegTag("i", "integ9").

directHasIntegTag("h", "integ10").
directHasIntegTag("j", "integ10").
expectHasIntegTag("h", "integ10").
expectHasIntegTag("j", "integ10").

directHasIntegTag("i", "integ11").
directHasIntegTag("j", "integ11").
expectHasIntegTag("i", "integ11").
expectHasIntegTag("j", "integ11").

directHasIntegTag("k", "integ12").
expectHasIntegTag("k", "integ12").

// Show that clearing an integrity tag on "n" causes it to not propagate to "o".
edge("m", "n").
edge("n", "o").

directHasIntegTag("m", "integ13").
removeIntegTag("n", "integ13").

expectHasIntegTag("m", "integ13").

// Ensure that the expected and actual integrity tag relations are equivalent.
.decl expectedTagNotPresent(ap: AccessPath, tag: IntegTag)
expectedTagNotPresent(ap, tag) :- expectHasIntegTag(ap, tag), !mustHaveIntegTag(ap, tag).

.decl unexpectedTagPresent(ap: AccessPath, tag: IntegTag)
unexpectedTagPresent(ap, tag) :- mustHaveIntegTag(ap, tag), !expectHasIntegTag(ap, tag).

.output expectedTagNotPresent(IO=stdout, delimiter=",")
.output unexpectedTagPresent(IO=stdout, delimiter=",")

// These help with debugging if the test fails.
.output directHasIntegTag(IO=stdout, delimiter=",")
.output mustHaveIntegTag(IO=stdout, delimiter=",")
.output mayHaveInvIntegTag(IO=stdout, delimiter=",")

TEST_CASE("expected_tag_not_present_is_empty") :- count : { expectedTagNotPresent(_, _) } = 0.
TEST_CASE("unexpected_tag_present_is_empty") :- count : { unexpectedTagPresent(_, _) } = 0.
TEST_CASE("num_expected_matches_num_actual_and_not_zero") :-
  count_expected = count : { expectHasIntegTag(_, _) },
  count_actual = count : { mustHaveIntegTag(_, _) },
  count_expected != 0,
  count_actual != 0,
  count_expected = count_actual.
