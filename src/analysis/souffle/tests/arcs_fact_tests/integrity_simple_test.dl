#include "taint.dl"
#include "fact_test_helper.dl"

.decl expectHasIntegrityTag(ap: AccessPath, owner: Principal, tag: IntegrityTag)

isAccessPath("a").
isAccessPath("b").
isAccessPath("c").
isAccessPath("d").
isAccessPath("e").
isAccessPath("f").
isAccessPath("g").
isAccessPath("h").
isAccessPath("i").
isAccessPath("j").
isAccessPath("k").
// Intentionally skipping "l" so it is not confused with "1".
//isAccessPath("l").
isAccessPath("m").
isAccessPath("n").
isAccessPath("o").
isAccessPath("p").
isAccessPath("q").
isAccessPath("r").
isAccessPath("s").
isAccessPath("t").
isAccessPath("u").

// Make "c" the target of a phi from "a" and "b".
phi("c", "a", "b").

// Make "e" the target of a phi from "c" and "d".
phi("e", "c", "d").

// If we apply "integ1" and "integ2" to "a" and "b", they should also appear on
// "c".
directHasIntegrityTag("a", "defaultOwner", "integ1").
directHasIntegrityTag("b", "defaultOwner", "integ1").

directHasIntegrityTag("a", "defaultOwner", "integ2").
directHasIntegrityTag("b", "defaultOwner", "integ2").

expectHasIntegrityTag("a", "defaultOwner", "integ1").
expectHasIntegrityTag("b", "defaultOwner", "integ1").
expectHasIntegrityTag("c", "defaultOwner", "integ1").

expectHasIntegrityTag("a", "defaultOwner", "integ2").
expectHasIntegrityTag("b", "defaultOwner", "integ2").
expectHasIntegrityTag("c", "defaultOwner", "integ2").

// If we apply "integ1" to d, it should also appear on e.
directHasIntegrityTag("d", "defaultOwner", "integ1").

expectHasIntegrityTag("d", "defaultOwner", "integ1").
expectHasIntegrityTag("e", "defaultOwner", "integ1").

// If we apply "integ3" to "a" and not "b", however, it should not appear on
// "c".
directHasIntegrityTag("a", "defaultOwner", "integ3").
expectHasIntegrityTag("a", "defaultOwner", "integ3").

// Similarly if we apply "integ4" only to "b".
directHasIntegrityTag("b", "defaultOwner", "integ4").
expectHasIntegrityTag("b", "defaultOwner", "integ4").

// If we apply "integ5" to "c" and "d" directly, it should appear on "e".
directHasIntegrityTag("c", "defaultOwner", "integ5").
directHasIntegrityTag("d", "defaultOwner", "integ5").

expectHasIntegrityTag("c", "defaultOwner", "integ5").
expectHasIntegrityTag("d", "defaultOwner", "integ5").
expectHasIntegrityTag("e", "defaultOwner", "integ5").

// Check that this works correctly with numbers of children other than 2.

// "g" has one child, "f".
isAccessPath("f").
isAccessPath("g").

edge("f", "g").

directHasIntegrityTag("f", "defaultOwner", "integ6").
expectHasIntegrityTag("f", "defaultOwner", "integ6").
expectHasIntegrityTag("g", "defaultOwner", "integ6").

directHasIntegrityTag("g", "defaultOwner", "integ7").
expectHasIntegrityTag("g", "defaultOwner", "integ7").

// "k" has 3 children, "h", "i", and "j"
phi("phi_temp1", "h", "i").
phi("k", "j", "phi_temp1").

directHasIntegrityTag("h", "defaultOwner", "integ8").
directHasIntegrityTag("i", "defaultOwner", "integ8").
directHasIntegrityTag("j", "defaultOwner", "integ8").

expectHasIntegrityTag("h", "defaultOwner", "integ8").
expectHasIntegrityTag("i", "defaultOwner", "integ8").
expectHasIntegrityTag("j", "defaultOwner", "integ8").
expectHasIntegrityTag("k", "defaultOwner", "integ8").
expectHasIntegrityTag("phi_temp1", "defaultOwner", "integ8").

directHasIntegrityTag("h", "defaultOwner", "integ9").
directHasIntegrityTag("i", "defaultOwner", "integ9").
expectHasIntegrityTag("h", "defaultOwner", "integ9").
expectHasIntegrityTag("i", "defaultOwner", "integ9").
expectHasIntegrityTag("phi_temp1", "defaultOwner", "integ9").

directHasIntegrityTag("h", "defaultOwner", "integ10").
directHasIntegrityTag("j", "defaultOwner", "integ10").
expectHasIntegrityTag("h", "defaultOwner", "integ10").
expectHasIntegrityTag("j", "defaultOwner", "integ10").

directHasIntegrityTag("i", "defaultOwner", "integ11").
directHasIntegrityTag("j", "defaultOwner", "integ11").
expectHasIntegrityTag("i", "defaultOwner", "integ11").
expectHasIntegrityTag("j", "defaultOwner", "integ11").

directHasIntegrityTag("k", "defaultOwner", "integ12").
expectHasIntegrityTag("k", "defaultOwner", "integ12").

// Show that clearing an integrity tag on "n" causes it to not propagate to "o".
edge("m", "n").
edge("n", "o").

directHasIntegrityTag("m", "defaultOwner", "integ13").
removeIntegrityTag("n", "defaultOwner", "integ13").

expectHasIntegrityTag("m", "defaultOwner", "integ13").

// Show that integrity tags with different owners are treated as two different
// integrity tags.
phi("r", "p", "q").

directHasIntegrityTag("p", "owner1", "integ14").
directHasIntegrityTag("q", "owner2", "integ14").

expectHasIntegrityTag("p", "owner1", "integ14").
expectHasIntegrityTag("q", "owner2", "integ14").

// Show that removing an integrity tag with a different owner does not block
// its propagation.
edge("s", "t").
edge("t", "u").

directHasIntegrityTag("s", "owner1", "integ15").
removeIntegrityTag("t", "owner2", "integ15").

expectHasIntegrityTag("s", "owner1", "integ15").
expectHasIntegrityTag("t", "owner1", "integ15").
expectHasIntegrityTag("u", "owner1", "integ15").

// Ensure that the expected and actual integrity tag relations are equivalent.
.decl expectedTagNotPresent(ap: AccessPath, owner: Principal, tag: IntegrityTag)
expectedTagNotPresent(ap, owner, tag) :-
  expectHasIntegrityTag(ap, owner, tag), !mustHaveIntegrityTag(ap, owner, tag).

.decl unexpectedTagPresent(ap: AccessPath, owner: Principal, tag: IntegrityTag)
unexpectedTagPresent(ap, owner, tag) :-
  mustHaveIntegrityTag(ap, owner, tag), !expectHasIntegrityTag(ap, owner, tag).

.output expectedTagNotPresent(IO=stdout, delimiter=",")
.output unexpectedTagPresent(IO=stdout, delimiter=",")

// These help with debugging if the test fails.
.output directHasIntegrityTag(IO=stdout, delimiter=",")
.output mustHaveIntegrityTag(IO=stdout, delimiter=",")

TEST_CASE("expected_tag_not_present_is_empty") :- count : { expectedTagNotPresent(_, _, _) } = 0.
TEST_CASE("unexpected_tag_present_is_empty") :- count : { unexpectedTagPresent(_, _, _) } = 0.
TEST_CASE("num_expected_matches_num_actual_and_not_zero") :-
  count_expected = count : { expectHasIntegrityTag(_, _, _) },
  count_actual = count : { mustHaveIntegrityTag(_, _, _) },
  count_expected != 0,
  count_actual != 0,
  count_expected = count_actual.
