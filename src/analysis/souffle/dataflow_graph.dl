//-----------------------------------------------------------------------------
// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//-----------------------------------------------------------------------------
#ifndef SRC_ANALYSIS_SOUFFLE_DATAFLOW_GRAPH_DL_
#define SRC_ANALYSIS_SOUFFLE_DATAFLOW_GRAPH_DL_

#include "access_path.dl"

// A data flow edge.
.decl edge(src: AccessPath, tgt: AccessPath)

// Use the previous relations to map an edge to a generated access path
// representing its midpoint.
.decl edgeToMidpointAccessPath(src: AccessPath, tgt: AccessPath, midpoint: AccessPath)

// An "innerEdge" is an internal concept. When the user requests an edge with an
// edge fact, we will expand that into innerEdges in one of two ways:
//
// 1. The edge is not the subject of a claimNotEdge, in which case an
// innerEdge directly corresponding to the edge is created.
//
// 2. The edge is the subject of a claimNotEdge, in which case three facts
// are created: a generated midway point AccessPath, an innerEdge going from the
// src of the original edge to the midway point, and the midway point AccessPath
// to the tgt. That allows us to effectively eliminate edges that are the
// subject of a claimNotEdge from the dataflow graph by eliminating all tags
// from the midway point. Paths are defined in terms of innerEdges.
.decl innerEdge(src: AccessPath, tgt: AccessPath)

// A direct or transitive data flow path.
.decl path(src: AccessPath, tgt: AccessPath)

//-----------------------------------------------------------------------------
// Rules
//-----------------------------------------------------------------------------
// Generate a midpoint access path for each edge that is the subject of a
// claimNotEdge from any principal.
edgeToMidpointAccessPath(src, tgt, cat("##midpoint_", to_string($))) :-
  edge(src, tgt), claimNotEdge(_, src, tgt).

// Generate inner edges to and from that midpoint for each edge with a midpoint.
innerEdge(src, midpoint), innerEdge(midpoint, tgt) :-
  edgeToMidpointAccessPath(src, tgt, midpoint).

// For edges for which a midpoint was not generated, generate an innerEdge
// corresponding to the original edge.
innerEdge(src, tgt) :- edge(src, tgt), !edgeToMidpointAccessPath(src, tgt, _).

// Transitive paths
path(from, to) :- innerEdge(from, to).
path(from, to) :- innerEdge(from, intermediate), path(intermediate, to).

// Symbols used in innerEdges are access paths
isAccessPath(x) :- innerEdge(x, _).
isAccessPath(y) :- innerEdge(_, y).

#endif // SRC_ANALYSIS_SOUFFLE_DATAFLOW_GRAPH_DL_
